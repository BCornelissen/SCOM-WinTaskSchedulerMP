<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>Windows.TaskScheduler.Monitoring</ID>
      <Version>1.2.1.7</Version>
    </Identity>
    <Name>Windows Task Scheduler PS Job Monitoring - Windows Server 2008 and later</Name>
    <References>
      <Reference Alias="SCDW">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="ClusterLib">
        <ID>Microsoft.Windows.Cluster.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Performance">
        <ID>System.Performance.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SchTaskLib">
        <ID>Windows.TaskScheduler.Library</ID>
        <Version>1.2.1.1</Version>
        <PublicKeyToken>7a3167b109e9b862</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="Custom.PSScheduledJob.Job" Accessibility="Public" Abstract="false" Base="Custom.TaskScheduler2.Task" Hosted="true" Singleton="false" />
        <ClassType ID="Custom.PSScheduledJob.ScheduledJob" Accessibility="Public" Abstract="false" Base="Custom.TaskScheduler2.ScheduledTask" Hosted="true" Singleton="false" />
        <ClassType ID="Custom.TaskScheduler2.Task" Accessibility="Public" Abstract="false" Base="SchTaskLib!Custom.Windows.TaskSchedulerTask" Hosted="true" Singleton="false">
          <Property ID="TaskAuthor" Type="string" Key="false" CaseSensitive="false" />
          <Property ID="TaskIsHidden" Type="bool" Key="false" />
          <!-- enabled / disabled / running etc. -->
          <Property ID="TaskTriggers" Type="string" Key="false" CaseSensitive="false" />
          <Property ID="TaskActions" Type="string" Key="false" CaseSensitive="false" MaxLength="4096" />
          <!-- flag used for monitors and rules in case Windows Tasks were discovered as well -->
          <Property ID="WinTasksDiscovered" Type="bool" Key="false" />
        </ClassType>
        <ClassType ID="Custom.TaskScheduler2.ScheduledTask" Accessibility="Public" Abstract="false" Base="Custom.TaskScheduler2.Task" Hosted="true" Singleton="false"></ClassType>
        <ClassType ID="Custom.TaskScheduler2.Task.ShowMessageAction.Group" Accessibility="Public" Abstract="false" Base="SchTaskLib!Custom.Windows.TaskSchedulerTask.Group" Hosted="false" Singleton="true" />
        <ClassType ID="Custom.TaskScheduler2.Task.ComputerGroup" Accessibility="Internal" Abstract="false" Base="SC!Microsoft.SystemCenter.ComputerGroup" Hosted="false" Singleton="true" />
      </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.Discovery.MapperSchema</SchemaType>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element minOccurs="1" name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="WindowsVersionRegEx" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="PathRegEx" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="NameRegEx" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="PathExcludeRegEx" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="NameExcludeRegEx" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="DiscoverWindowsTasks" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="DiscoverHiddenTasks" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="SpreadInitializationOverInterval" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ClassId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="InstanceSettings" type="SettingsType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Expression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="WindowsVersionRegEx" Selector="$Config/WindowsVersionRegEx$" ParameterType="string" />
          <OverrideableParameter ID="PathRegEx" Selector="$Config/PathRegEx$" ParameterType="string" />
          <OverrideableParameter ID="NameRegEx" Selector="$Config/NameRegEx$" ParameterType="string" />
          <OverrideableParameter ID="PathExcludeRegEx" Selector="$Config/PathExcludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="NameExcludeRegEx" Selector="$Config/NameExcludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="DiscoverWindowsTasks" Selector="$Config/DiscoverWindowsTasks$" ParameterType="bool" />
          <OverrideableParameter ID="DiscoverHiddenTasks" Selector="$Config/DiscoverHiddenTasks$" ParameterType="bool" />
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <!-- UniquenessScheduler features UniquenessKey to force running just once per computer         -->
              <!--     such both discoveries will cook down into a single script run                       -->
              <!--     MPBA will complain but this is ok as SpreadInitializationOverInterval is implementd -->
              <DataSource ID="Scheduler" TypeID="System!System.UniquenessScheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
                <UniquenessKey>$Config/ComputerName$</UniquenessKey>
              </DataSource>
              <!-- check what Windows Version and if PowerShell -->
              <ProbeAction TypeID="Windows!Microsoft.Windows.RegistryProbe" ID="RegistryProbe">
                <ComputerName>$Config/ComputerName$</ComputerName>
                <RegistryAttributeDefinitions>
                  <!-- Windows Version -->
                  <RegistryAttributeDefinition>
                    <AttributeName>CurrentVersion</AttributeName>
                    <Path>SOFTWARE\Microsoft\Windows NT\CurrentVersion\CurrentVersion</Path>
                    <PathType>1</PathType>
                    <AttributeType>1</AttributeType>
                    <RegistryView>Default</RegistryView>
                  </RegistryAttributeDefinition>
                  <!-- PowerShell -->
                  <RegistryAttributeDefinition>
                    <AttributeName>PowerShell</AttributeName>
                    <Path>SOFTWARE\Microsoft\PowerShell</Path>
                    <PathType>0</PathType>
                    <AttributeType>0</AttributeType>
                    <RegistryView>Default</RegistryView>
                  </RegistryAttributeDefinition>
                </RegistryAttributeDefinitions>
              </ProbeAction>
              <ProbeAction ID="ScriptProbe" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.ScriptProbe">
                <DiscoverWindowsTasks>$Config/DiscoverWindowsTasks$</DiscoverWindowsTasks>
                <!-- discovery does not need to evaluate run time -->
                <LastRunDurationLookback>0</LastRunDurationLookback>
                <Debug>$Config/Debug$</Debug>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
              <ConditionDetection TypeID="System!System.LogicalSet.ExpressionFilter" ID="WinVerPoSh">
                <Expression>
                  <And>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Values/CurrentVersion</XPathQuery>
                        </ValueExpression>
                        <Operator>MatchesRegularExpression</Operator>
                        <Pattern>$Config/WindowsVersionRegEx$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="Boolean">Values/PowerShell</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="Boolean">true</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
                <!-- block any empty data set -->
                <EmptySet>Block</EmptySet>
                <!-- pass any data set that contains data -->
                <SetEvaluation>Any</SetEvaluation>
              </ConditionDetection>
              <ConditionDetection ID="TaskInstanceFilter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <And>
                    <!-- include filters -->
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                        </ValueExpression>
                        <Operator>MatchesRegularExpression</Operator>
                        <Pattern>$Config/PathRegEx$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Property[@Name='Name']</XPathQuery>
                        </ValueExpression>
                        <Operator>MatchesRegularExpression</Operator>
                        <Pattern>$Config/NameRegEx$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <!-- exclude filters -->
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotMatchRegularExpression</Operator>
                        <Pattern>$Config/PathExcludeRegEx$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Property[@Name='Name']</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotMatchRegularExpression</Operator>
                        <Pattern>$Config/NameExcludeRegEx$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <Or>
                        <!-- filter to enable discovery of hidden tasks -->
                        <Expression>
                          <And>
                            <Expression>
                              <SimpleExpression>
                                <ValueExpression>
                                  <Value Type="String">$Config/DiscoverHiddenTasks$</Value>
                                </ValueExpression>
                                <Operator>Equal</Operator>
                                <ValueExpression>
                                  <Value Type="String">false</Value>
                                </ValueExpression>
                              </SimpleExpression>
                            </Expression>
                            <Expression>
                              <RegExExpression>
                                <ValueExpression>
                                  <XPathQuery Type="String">Property[@Name='Hidden']</XPathQuery>
                                </ValueExpression>
                                <Operator>MatchesRegularExpression</Operator>
                                <Pattern>false</Pattern>
                              </RegExExpression>
                            </Expression>
                          </And>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <Value Type="String">$Config/DiscoverHiddenTasks$</Value>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">true</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </Or>
                    </Expression>
                  </And>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="ClassMapper" TypeID="System!System.Discovery.FilteredClassSnapshotDataMapper">
                <Expression>$Config/Expression$</Expression>
                <ClassId>$Config/ClassId$</ClassId>
                <InstanceSettings>$Config/InstanceSettings$</InstanceSettings>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="ClassMapper">
                <Node ID="TaskInstanceFilter">
                  <Node ID="ScriptProbe">
                    <Node ID="WinVerPoSh">
                      <Node ID="RegistryProbe">
                        <Node ID="Scheduler" />
                      </Node>
                    </Node>
                  </Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Custom.Windows.ScheduledTask.TaskDuration.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TaskPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WindowsTasks" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" maxOccurs="1" name="Tolerance" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="ToleranceType" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:enumeration value="Absolute" />
                <xsd:enumeration value="Percentage" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="MaximumSampleSeparation" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="Tolerance" ParameterType="double" Selector="$Config/Tolerance$" />
          <OverrideableParameter ID="MaximumSampleSeparation" ParameterType="int" Selector="$Config/MaximumSampleSeparation$" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <!-- trigger on events: either agent start or after tasks have ended                                         -->
              <!--     the latter are written by the rule Custom.TaskScheduler2.Task.TaskActionObserved.EventCreation.Rule -->
              <DataSource ID="EventDS" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent.DS">
                <ComputerName>$Config/ComputerName$</ComputerName>
                <LogName>Operations Manager</LogName>
                <Expression>
                  <Or>
                    <Expression>
                      <And>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="UnsignedInteger">1005</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">PublisherName</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">Health Service Script</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <!-- Script Name -->
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">Custom.TaskScheduler2.Task.WorkflowTriggerEvent.ps1</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <!-- MP Name -->
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[4]</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">Custom.Windows.TaskScheduler.Windows2008.Monitoring</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <!-- Management Group Name -->
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[5]</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">$Target/ManagementGroup/Name$</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </And>
                    </Expression>
                    <Expression>
                      <And>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="UnsignedInteger">2002</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">PublisherName</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">HealthService</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <!-- Management Group Name -->
                        <!--
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      -->
                      </And>
                    </Expression>
                  </Or>
                </Expression>
                <Consolidator>
                  <ConsolidationProperties />
                  <TimeControl>
                    <!-- wait for delayed events -->
                    <Latency>10</Latency>
                    <!-- don't wait for backlogged items -->
                    <DrainWait>0</DrainWait>
                    <WithinTimeSchedule>
                      <!-- don't call script more than once 10 seconds -->
                      <Interval>10</Interval>
                    </WithinTimeSchedule>
                  </TimeControl>
                  <!-- output only after the latency has passed -->
                  <!--     will output any input item (if any) that has happened -->
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </DataSource>
              <ProbeAction ID="ScriptProbe" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.ScriptProbe">
                <DiscoverWindowsTasks>$Config/WindowsTasks$</DiscoverWindowsTasks>
                <!-- look back maximum 3 minutes -->
                <LastRunDurationLookback>180</LastRunDurationLookback>
                <Debug>$Config/Debug$</Debug>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
              <ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">$Config/TaskPath$</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="Double">Property[@Name='LastRunDurationMinutes']</XPathQuery>
                        </ValueExpression>
                        <Operator>GreaterEqual</Operator>
                        <ValueExpression>
                          <Value Type="Double">0</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="PerfMapper" TypeID="Performance!System.Performance.DataGenericMapper">
                <ObjectName>Windows Scheduled Tasks</ObjectName>
                <CounterName>Job Duration (min)</CounterName>
                <InstanceName>$Config/TaskPath$</InstanceName>
                <Value>$Data/Property[@Name='LastRunDurationMinutes']$</Value>
              </ConditionDetection>
              <ConditionDetection ID="OptimizedFilter" TypeID="Performance!System.Performance.OptimizedCollectionFilter">
                <Tolerance>$Config/Tolerance$</Tolerance>
                <ToleranceType>$Config/ToleranceType$</ToleranceType>
                <MaximumSampleSeparation>$Config/MaximumSampleSeparation$</MaximumSampleSeparation>
                <!-- as this DS isn't running on a schedule; just use a generic value of 5 minutes -->
                <SamplingPeriodInSeconds>300</SamplingPeriodInSeconds>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="OptimizedFilter">
                <Node ID="PerfMapper">
                  <Node ID="Filter">
                    <Node ID="ScriptProbe">
                      <Node ID="EventDS" />
                    </Node>
                  </Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Performance!System.Performance.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Custom.TaskScheduler2.Task.RepeatedEvent.DS" Accessibility="Internal">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="LogName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Expression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Consolidator" type="ConsolidatorType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters></OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource TypeID="Windows!Microsoft.Windows.BaseEventProvider" ID="EventRepeatDS">
                <ComputerName>$Config/ComputerName$</ComputerName>
                <LogName>$Config/LogName$</LogName>
              </DataSource>
              <ConditionDetection TypeID="System!System.ExpressionFilter" ID="RepeatedFilterCondition">
                <Expression>$Config/Expression$</Expression>
              </ConditionDetection>
              <ConditionDetection TypeID="System!System.ConsolidatorCondition" ID="RepeatedDataCondition">
                <Consolidator>$Config/Consolidator$</Consolidator>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="RepeatedDataCondition">
                <Node ID="RepeatedFilterCondition">
                  <Node ID="EventRepeatDS" />
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.ConsolidatorData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Custom.TaskScheduler2.Task.RepeatedEvent_TaskConfigurationObserved.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ConsolidationSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="ConsolidationSeconds" Selector="$Config/ConsolidationSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="EventDS" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent.DS">
                <ComputerName>$Config/ComputerName$</ComputerName>
                <LogName>Microsoft-Windows-TaskScheduler/Operational</LogName>
                <Expression>
                  <And>
                    <!--  task started (100)
                          task failure (101)
                          task completed (102)
                          task registered (106)
                          task terminated (111)
                          task registration updated (140)
                          task registration deleted (141)
                          task disabled (142)
                          action completed (201)
                          task engine idle (314)
                          task termination request (320)
                          task stopped due to timeout (329)
                          task stopping due to user request (330)
                          -->
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="Integer">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>MatchesRegularExpression</Operator>
                        <Pattern>^(106|140|141|142)$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventSourceName</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Microsoft-Windows-TaskScheduler</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
                <Consolidator>
                  <ConsolidationProperties />
                  <TimeControl>
                    <!-- wait for delayed events -->
                    <Latency>10</Latency>
                    <!-- don't wait for backlogged items -->
                    <DrainWait>0</DrainWait>
                    <WithinTimeSchedule>
                      <!-- don't call script more than once every n seconds -->
                      <Interval>$Config/ConsolidationSeconds$</Interval>
                    </WithinTimeSchedule>
                  </TimeControl>
                  <!-- output only after the latency has passed                  -->
                  <!--     will output any input item (if any) that has happened -->
                  <!--     otherwise remain quiet                                -->
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="EventDS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.ConsolidatorData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Custom.TaskScheduler2.Task.RepeatedEvent_TaskEndingObserved.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ConsolidationSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="ConsolidationSeconds" Selector="$Config/ConsolidationSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="EventDS" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent.DS">
                <ComputerName>$Config/ComputerName$</ComputerName>
                <LogName>Microsoft-Windows-TaskScheduler/Operational</LogName>
                <Expression>
                  <And>
                    <!--  task started (100)
                          task failure (101)
                          task completed (102)
                          task registered (106)
                          task terminated (111)
                          task registration updated (140)
                          task registration deleted (141)
                          task disabled (142)
                          action completed (201)
                          task engine idle (314)
                          task termination request (320)
                          task stopped due to timeout (329)
                          task stopping due to user request (330)
                          -->
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="Integer">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>MatchesRegularExpression</Operator>
                        <Pattern>^(101|102|111)$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventSourceName</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Microsoft-Windows-TaskScheduler</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
                <Consolidator>
                  <ConsolidationProperties />
                  <TimeControl>
                    <!-- wait for delayed events -->
                    <Latency>10</Latency>
                    <!-- don't wait for backlogged items -->
                    <DrainWait>0</DrainWait>
                    <WithinTimeSchedule>
                      <!-- don't call script more than once every n seconds -->
                      <Interval>$Config/ConsolidationSeconds$</Interval>
                    </WithinTimeSchedule>
                  </TimeControl>
                  <!-- output only after the latency has passed                  -->
                  <!--     will output any input item (if any) that has happened -->
                  <!--     otherwise remain quiet                                -->
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="EventDS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.ConsolidatorData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Custom.TaskScheduler2.Task.Scheduler.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="Interval" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SpreadInitializationOverInterval" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Interval" Selector="$Config/Interval$" ParameterType="int" />
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval>$Config/Interval$</Interval>
                    <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Scheduler" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.TriggerData</OutputType>
      </DataSourceModuleType>
      <ProbeActionModuleType ID="Custom.TaskScheduler2.Task.GetTaskProperties.ScriptProbe" Accessibility="Internal" Batching="false" PassThrough="false">
        <Configuration>
          <xsd:element minOccurs="1" name="DiscoverWindowsTasks" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="LastRunDurationLookback" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="DiscoverWindowsTasks" Selector="$Config/DiscoverWindowsTasks$" ParameterType="bool" />
          <OverrideableParameter ID="LastRunDurationLookback" Selector="$Config/LastRunDurationLookback$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="TaskBagProbe" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Custom.TaskScheduler2.Task.GetTaskAndJobsProperties.ps1</ScriptName>
                <ScriptBody><![CDATA[# Returns SCOM PropertyBags of Task Scheduler Tasks and PowerShell Scheduled Jobs
#
#	output is to be used both by discovery, monitors and rules
#
#	script will run with slightly reduced functionality on PS 2.0
#			(SCOM agent PS host remains on 2.0 even after Management Framework upgrade on W2k8R2)
#
#
# Version 1.0 - 09. May 2014 - initial            			  - Raphael Burri - raburri@bluewin.ch
# Version 2.0 - 04. June 2014 - added PSScheduledJob support  - Raphael Burri - raburri@bluewin.ch
# Version 2.1 - 19. June 2014 - made script more robust regarding legacy PowerShell (2.0).
# Version 2.2 - 15. April 2020 - MemoryLeak Fix in Get-WinEvent and comment Write-Host in Functions, now much slower - Bernhard Scherndl

param ( [string]$scriptName = 'Custom.TaskScheduler2.Task.GetTaskProperties.ps1',
		[string]$discoverWindowsTasks = 'false',
		[int]$lastRunDurationLookback = 900,
		[string]$debugParam = 'true'
		)

#get tasks from a folder; thenn drill down into subfolders
function Get-AllTasks
	{
	Param ([string]$path,
	[int]$lastRunDurationLookback,
	[int]$eventSupport) 

	$tasks = @()
   	#only fetch system tasks (folders in \Microsoft\Windows with the exception of PS scheduled jobs and Backup), if asked to
	If (($DiscoverWindowsTasks -eq $true) -or (($discoverWindowsTasks -eq $false) -and (($path -notmatch "^\\Microsoft\\Windows\\") -or ($path -match "^\\Microsoft\\Windows\\(Backup|PowerShell)\\"))))
		{
	   	# Get folder's root tasks
    	$schedule.GetFolder($path).GetTasks(0) | % `
			{
			$isPSScheduledJob = $false
			$TaskTriggerText = ""
			$TaskActionText = ""
			$TaskLastRuntime = -1
			$TaskLastRuntimeMinutes = -1
			$TaskRunningSince = -1
			$TaskLauchRequestSkipped = "False"
			
			$cleanTask = New-Object psobject
			$cleanTask | Add-Member -MemberType NoteProperty -Name Name -Value $_.Name
			$cleanTask | Add-Member -MemberType NoteProperty -Name Path -Value $_.Path
			$cleanTask | Add-Member -MemberType NoteProperty -Name Author -Value $_.Definition.RegistrationInfo.Author
			$cleanTask | Add-Member -MemberType NoteProperty -Name Description -Value $_.Definition.RegistrationInfo.Description
			$cleanTask | Add-Member -MemberType NoteProperty -Name User -Value $_.Definition.Principal.userId
			$cleanTask | Add-Member -MemberType NoteProperty -Name Hidden -Value $_.Definition.Settings.Hidden
			
			#if task runtime doesn't have a date then it actually hasn't ever run so far. The timestamp will be 12/30/1899 12:00:00 AM
			If (((Get-Date) - $_.LastRunTime).Days -lt 36500)
				{
				#no SCOM DB overloading --> return static text.
				$cleanTask | Add-Member -MemberType NoteProperty -Name LastRunTime -Value "HasDate"
				}
			Else
				{
				$cleanTask | Add-Member -MemberType NoteProperty -Name LastRunTime -Value "Never"
				}
			
			#likewise for next run (e.g. tasks without a schedule)
			If (((Get-Date) - $_.NextRunTime).Days -lt 36500)
				{
				#no SCOM DB overloading --> return static text.
				$cleanTask | Add-Member -MemberType NoteProperty -Name NextRunTime -Value "HasDate"
				}
			Else
				{
				$cleanTask | Add-Member -MemberType NoteProperty -Name NextRunTime -Value "NotDefined"
				}
			
			#if the task has not run so far then ignore the last result
			If ($cleanTask.LastRunTime -eq "Never") {
				$cleanTask | Add-Member -MemberType NoteProperty -Name LastTaskResult -Value ""
				$cleanTask | Add-Member -MemberType NoteProperty -Name LastTaskResultHex -Value ""
				}
			else {
				$cleanTask | Add-Member -MemberType NoteProperty -Name LastTaskResult -Value $_.LastTaskResult
				$cleanTask | Add-Member -MemberType NoteProperty -Name LastTaskResultHex -Value ("0x" + ("{0:x8}" -f  $_.LastTaskResult))
				}
			
			$cleanTask | Add-Member -MemberType NoteProperty -Name State -Value $_.State
			#add text for state
			switch ($_.State) {
				0 {$cleanTask | Add-Member -MemberType NoteProperty -Name StateText -Value $TASK_STATE_0}
				1 {$cleanTask | Add-Member -MemberType NoteProperty -Name StateText -Value $TASK_STATE_1}
				2 {$cleanTask | Add-Member -MemberType NoteProperty -Name StateText -Value $TASK_STATE_2}
				3 {$cleanTask | Add-Member -MemberType NoteProperty -Name StateText -Value $TASK_STATE_3}
				4 {$cleanTask | Add-Member -MemberType NoteProperty -Name StateText -Value $TASK_STATE_4}
				default {$cleanTask | Add-Member -MemberType NoteProperty -Name StateText -Value "Unknown"}
				}
			#assume the task has no schedule based triggers	- overwrite if otherwise
			$cleanTask | Add-Member -MemberType NoteProperty -Name TaskIsScheduled -Value 'False'
			#build one string describing the triggers
			
			foreach ($trigger in $_.Definition.Triggers)
				{
				#trigger.Enabled gives localized output. As the monitors are later matching this for 'True' resp. 'False', this need to be changed into an english string
				If ($trigger.Enabled -eq $true) { $TriggerStateText = "True" }
				Else { $TriggerStateText = "False" }
				switch ($trigger.Type) {
					0 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_TYPE_0 + " ||| "}
					1 {
						$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_TYPE_1 + " ||| "
						if ($trigger.Enabled -eq $true) {$cleanTask | Add-Member -MemberType NoteProperty -Name TaskIsScheduled -Value 'True' -Force}
						}
					2 {
						$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_TYPE_2 + " ||| "
						if ($trigger.Enabled -eq $true) {$cleanTask | Add-Member -MemberType NoteProperty -Name TaskIsScheduled -Value 'True' -Force}
						}
					3 {
						$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_TYPE_3 + " ||| "
						if ($trigger.Enabled -eq $true) {$cleanTask | Add-Member -MemberType NoteProperty -Name TaskIsScheduled -Value 'True' -Force}
						}
					4 {
						$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_TYPE_4 + " ||| "
						if ($trigger.Enabled -eq $true) {$cleanTask | Add-Member -MemberType NoteProperty -Name TaskIsScheduled -Value 'True' -Force}
						}
					5 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_TYPE_5 + " ||| "}
					6 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_TYPE_6 + " ||| "}
					7 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_TYPE_7 + " ||| "}
					8 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_TYPE_8 + " ||| "}
					9 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_TYPE_9 + " ||| "}
					11 {
						switch ($trigger.StateChange) {
							1 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_STATE_CHANGE_1 + " ||| "}
							2 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_STATE_CHANGE_2 + " ||| "}
							3 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_STATE_CHANGE_3 + " ||| "}
							4 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_STATE_CHANGE_4 + " ||| "}
							7 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_STATE_CHANGE_7 + " ||| "}
							8 {$TaskTriggerText = $TaskTriggerText + $TriggerStateText + ": " + $TRIGGER_STATE_CHANGE_8 + " ||| "}
							default {$TaskTriggerText = $TaskTriggerText + "Unknown (StateChange " + $trigger.StateChange + ") ||| "}
							}
						}
					default {$TaskTriggerText = $TaskTriggerText + "Unknown (Type " + $trigger.Type + ") ||| "}
					}
				}
			#clean up string
			if ($TaskTriggerText.length -gt 0) {$TaskTriggerText = ($TaskTriggerText.Substring(0,$TaskTriggerText.length - 5)).trim()}
			$cleanTask | Add-Member -MemberType NoteProperty -Name TriggerText -Value $TaskTriggerText
	
			#build one string describing the actions
			foreach ($action in $_.Definition.Actions) {
				switch ($action.type)	{
					0 {#check if it is a PSScheduledJob
						if (($cleanTask.path -imatch "^\\Microsoft\\Windows\\PowerShell\\") -and `
								($action.arguments -imatch "\[Microsoft\.PowerShell\.ScheduledJob\.ScheduledJobDefinition\]::LoadFromStore\("))
							{
							$isPSScheduledJob = $true
							}
						$TaskActionText = $TaskActionText + $TASK_ACTION_0 + ": " + $action.path + " " + $action.arguments + " ||| "
						}
					5 {$TaskActionText = $TaskActionText + $TASK_ACTION_5 + ": " + $action.classId + " " + $action.data + " ||| "}
					6 {$TaskActionText = $TaskActionText + $TASK_ACTION_6 + ": ""Server: " + $action.Server + ", " + `
								   "From: " + $action.From + ", " + `
								   "To: " + $action.To + ", " + `
								   "Cc:	" + $action.Cc + ", " + `
								   "Bcc: " + $action.Bcc + ", " + `
								   "Subject: " + $action.Subject + ", " + `
								   "Text:    " + $action.Body + """ ||| " 
					  }
					7 {$TaskActionText = $TaskActionText + $TASK_ACTION_7 + ": ""Title: " + $action.Title + ", " + `
								   "Text: " + $action.MessageBody + """ ||| "
						#message boxes always seem to return an exit code of 1. The MP will have to take this into account
					  }
					default {$TaskActionText = $TaskActionText + "Unknown (Type " + $action.Type + ") ||| "} 
					}
				}
			#clean up string
			if ($TaskActionText.length -gt 0) {$TaskActionText = ($TaskActionText.Substring(0,$TaskActionText.length - 5)).trim()}
			
			$cleanTask | Add-Member -MemberType NoteProperty -Name ActionText -Value $TaskActionText
			
			#last completed execution duration (from event log) and current run duration
			#     will be -1 if not applicable or task already running
			# get last end time from event log
			if (($lastRunDurationLookback -gt 0) -and ($eventSupport -eq 1))
				{
				$taskLastEndTime = (Get-TaskLastEndTime -taskPath $cleanTask.Path)
				#if recently then get the longest run
				if ((((Get-Date) - $taskLastEndTime).TotalSeconds -le $lastRunDurationLookback) -and ($_.State -gt 1))
					{
					#fetch the latest start events - lookback to allow getting the longest runtime on frequently running jobs
					$TaskLastStartEvents = @(Get-TaskLastRunDurations -taskPath $cleanTask.Path -lookbackSeconds $lastRunDurationLookback)
					#get the longest run observed during lookback timeframe from eventlog
					$TaskLastRuntimes = @($TaskLastStartEvents | Sort-Object @{Expression={$_.RunTimeSeconds}; Ascending=$false})
					$TaskLastRuntime = $TaskLastRuntimes.Get(0).RunTimeSeconds
					$TaskLastRuntimeMinutes = [decimal]::round(($TaskLastRuntime / 60),2)
#					Write-Host Observed $TaskLastRuntimes.Count end events of task $_.Name within the last $lastRunDurationLookback seconds. Longest RunTime of those was: $TaskLastRuntime seconds 
					
					#see if "launch request ignored" happened
					#     only reset skipped monitor if task ended WITHOUT a 322 event during its execution
					$TaskLastStartEvent = @($TaskLastStartEvents | Sort-Object @{Expression={$_.StartTime}; Ascending=$false}).Get(0)
					$taskLastLaunchSkipped = Get-TaskLastRunLaunchIgnored -taskPath $cleanTask.Path -lookbackSeconds $TaskLastStartEvent.RunTimeSeconds
					if ([datetime]$taskLastLaunchSkipped -gt [datetime]"1/1/1600")
						{
#						Write-Host Task launched skipped was observed during last run of task $_.Name at $taskLastLaunchSkipped
						$TaskLauchRequestSkipped = "True"
						}
					}
				}
			#fallback if no event support (PowerShell 1.0)
			if (($eventSupport -eq 0) -and ($_.State -gt 1))
				{
#				Write-Host -BackgroundColor Yellow -ForegroundColor Black WARNING: No exact runtime info as Get-WinEvent is not supported on PowerShell $PSVersionString
#				Write-Host -BackgroundColor Yellow -ForegroundColor Black `t estimating based on task''s LastRunTime - 120 seconds.
				#just estimate last runtime from task properties - not attempt to get the exact value from event log
				#   minus 120 seconds - this will be the minumal delay in calling script after task end event.
				$TaskLastRuntime= ([decimal]::round(((Get-Date) - $_.LastRunTime).TotalSeconds, 2) -120)
				$TaskLastRuntimeMinutes = [decimal]::round(($TaskLastRuntime / 60),2)
				}	
			$cleanTask | Add-Member -MemberType NoteProperty -Name LastRunDurationSeconds -Value $TaskLastRuntime
			$cleanTask | Add-Member -MemberType NoteProperty -Name LastRunDurationMinutes -Value $TaskLastRuntimeMinutes
			$cleanTask | Add-Member -MemberType NoteProperty -Name LaunchRequestSkippedDuringExecution -Value $TaskLauchRequestSkipped
			
			#if currently running see how long
			if ($_.State -eq 4)
				{
				#get how long since it's been started from last run time property
				$TaskRunningSince = [decimal]::round(((Get-Date) - $_.LastRunTime).TotalMinutes, 2)
				}	
			$cleanTask | Add-Member -MemberType NoteProperty -Name CurrentRunDurationMinutes -Value $TaskRunningSince
			
			#from SCOM perspective, scheduledtask and PSScheduledJob are mostly identical
			#   however; in order to check on their error, warning and output additional checking on their result.xml is required
			#   note: PSScheduledJob's return code will ALWAYS be 0, regardless of expcetions that might have been thrown.
			$cleanTask | Add-Member -MemberType NoteProperty -Name IsPSScheduledJob -Value $isPSScheduledJob
			if ($isPSScheduledJob -eq $true)
				{
				$psJobResult =  GetScheduledJobResult -scheduledTaskActionParameter $cleanTask.ActionText
				if ($psJobResult -ne $null)
					{
					#overwrite actiontext with PS scriptblock
					$actionText = ($TASK_ACTION_0_PS + ": " + $psJobResult.PSJobCommand)
					$cleanTask | Add-Member -MemberType NoteProperty -Name ActionText -Value $actionText -Force
					#specific PSScheduledJob properties
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobName -Value $psJobResult.PSJobName
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobCommand -Value $psJobResult.PSJobCommand
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobOutputCount -Value $psJobResult.PSJobOutputCount
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobOutputTypes -Value $psJobResult.PSJobOutputTypes
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobOutputContent -Value $psJobResult.PSJobOutputContent
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobErrorCount -Value $psJobResult.PSJobErrorCount
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobErrorContent -Value $psJobResult.PSJobErrorContent
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobWarningCount -Value $psJobResult.PSJobWarningCount
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobWarningContent -Value $psJobResult.PSJobWarningContent
				
					}
				}
			else
				{   #return empty strings for classic tasks
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobName -Value ""
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobCommand -Value ""
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobOutputCount -Value 0
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobOutputTypes -Value ""
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobOutputContent -Value ""
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobErrorCount -Value 0
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobErrorContent -Value ""
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobWarningCount -Value 0
					$cleanTask | Add-Member -MemberType NoteProperty -Name PSJobWarningContent -Value ""
				}
			#debug output to event log
			if ($debugParam -eq $true)
				{
				$cleanTaskOutput = "
Task Scheduler Task
-----------
Name: " + [string]$cleanTask.Name + "
Path: " + [string]$cleanTask.Path + "
Author: " + [string]$cleanTask.Author + "
User: " + [string]$cleanTask.User + "
IsPSScheduledJob: " + [string]$cleanTask.IsPSScheduledJob + "

Hidden: " + [string]$cleanTask.Hidden + "
LastRunTime: " + [string]$cleanTask.LastRunTime + "
NextRunTime: " + [string]$cleanTask.NextRunTime + "
LastTaskResult: " + [string]$cleanTask.LastTaskResult + "
LastTaskResultHex: " + [string]$cleanTask.LastTaskResultHex + "
State: " + [string]$cleanTask.State + "
StateText: " + [string]$cleanTask.StateText  +  "
TaskIsScheduled: " + [string]$cleanTask.TaskIsScheduled + "
TriggerText: " + [string]$cleanTask.TriggerText + "
ActionText: " + [string]$cleanTask.ActionText + "

LastRunDurationSeconds: " + [string]$cleanTask.LastRunDurationSeconds + "
LastRunDurationMinutes: " + [string]$cleanTask.LastRunDurationMinutes + "
CurrentRunDurationMinutes: " + [string]$cleanTask.CurrentRunDurationMinutes + "
LaunchRequestSkipped: " + [string]$cleanTask.LaunchRequestSkippedDuringExecution + "

PSJobName: " + [string]$cleanTask.PSJobName + "
PSJobCommand: " + [string]$cleanTask.PSJobCommand + "
PSJobOutputCount: " + [string]$cleanTask.PSJobOutputCount + "
PSJobErrorCount: " + [string]$cleanTask.PSJobErrorCount + "
PSJobErrorContent: " + [string]$cleanTask.PSJobErrorContent + "
PSJobWarningCount: " + [string]$cleanTask.PSJobWarningCount

				$objAPI.LogScriptEvent($scriptName, 9625, 4, "DEBUG: " + $cleanTaskOutput)
				}	
	
#			Write-Host adding task $cleanTask.Path
			$tasks += @($cleanTask)
			}	    
    	}

    # Get tasks from subfolders
    $schedule.GetFolder($path).GetFolders(0) | % {
		$tasks += @(Get-AllTasks -path $_.Path -lastRunDurationLookback $lastRunDurationLookback -eventSupport $eventSupport)
    	}

    #Output
    Return $tasks
}

function Get-TaskLastEndTime {
	param ([string]$taskPath)
	#fetch the most recent success event (102) or failed (111) event that occured within a timeframe
	# in case taskpath contains quotes, have to escape (double) them
	$taskPath = $taskPath.Replace("'","''")
	$successXPath = "*[System[((EventID=102) or (EventID=111))]] and *[EventData[Data[1]='" + $taskPath + "']]"
#	$taskSuccessEvent = get-winevent -LogName 'Microsoft-Windows-TaskScheduler/Operational' -FilterXPath $successXPath -MaxEvents 1 -ErrorAction SilentlyContinue
#	$taskSuccessEvent = get-winevent -LogName 'Microsoft-Windows-TaskScheduler/Operational' -FilterXPath $successXPath -ErrorAction SilentlyContinue
	$query = New-Object -TypeName System.Diagnostics.Eventing.Reader.EventLogQuery -ArgumentList @('Microsoft-Windows-TaskScheduler/Operational', 1, $successXPath)
    $reader = New-Object -TypeName System.Diagnostics.Eventing.Reader.EventLogReader -ArgumentList $query
    $taskSuccessEvent = $reader.ReadEvent()
    $reader.Dispose()
	if ($taskSuccessEvent)
		{
		return [datetime]$taskSuccessEvent.TimeCreated
		}
	else
		{
		#no end event found within the timeframe; return null
		return [datetime]"1/1/1600"
		}
	}

# get all task start events and their start times that occured within the last n seconds
function Get-TaskLastRunDurations {
	param ([string]$taskPath, [int]$lookbackSeconds)
	
	$taskDurations = @()
	# in case taskpath contains quotes, have to escape (double) them
	$taskPath = $taskPath.Replace("'","''")
	#fetch the most recent success (102) or terminated (111) events that occured within a timeframe
	$successXPath = "*[System[((EventID=102) or (EventID=111)) and TimeCreated[timediff(@SystemTime) <= " + $lookbackSeconds * 1000 + "]]] and *[EventData[Data[1]='" + $taskPath + "']]"
	$taskSuccessEvents = @(get-winevent -LogName 'Microsoft-Windows-TaskScheduler/Operational' -FilterXPath $successXPath -ErrorAction SilentlyContinue)
	if ($taskSuccessEvents.Count -gt 0)
		{
		foreach ($taskSuccessEvent in $taskSuccessEvents)
			{
			$taskDuration = New-Object psobject
			$taskDuration | Add-Member -MemberType NoteProperty -Name EndTime -Value $taskSuccessEvent.TimeCreated		
			#get start event (100) with the same TaskName and InstanceId
			$global:taskSuccessEvent = $taskSuccessEvent
			#InstanceId is 3rd on 102 event / 2nd on 111 event
			if ($taskSuccessEvent.Id -eq 102) {$taskInstanceId = $taskSuccessEvent.Properties[2].Value.ToString()}
			else {$taskInstanceId = $taskSuccessEvent.Properties[1].Value.ToString()}
			$startXPath = "*[System[(EventID=100)]] and *[EventData[(Data[1]='" + $taskSuccessEvent.Properties[0].Value.ToString().Replace("'","''") + "' and Data[3]='{" + $taskInstanceId + "}')]]"
#			$taskStartEvent = Get-WinEvent -LogName 'Microsoft-Windows-TaskScheduler/Operational' -FilterXPath $startXPath -MaxEvents 1 -ErrorAction SilentlyContinue
			$taskStartEvent = Get-WinEvent -LogName 'Microsoft-Windows-TaskScheduler/Operational' -FilterXPath $startXPath -ErrorAction SilentlyContinue
			if ($taskStartEvent) 
				{
                $taskStartEvent = $taskStartEvent[0]
				$taskDuration | Add-Member -MemberType NoteProperty -Name StartTime -Value $taskStartEvent.TimeCreated
				$taskRunTimeSeconds = [decimal]::round(($taskSuccessEvent.TimeCreated - $taskStartEvent.TimeCreated).TotalSeconds, 2)		
				}
			else
				{
				#no start event found within the timeframe; set duration to -1
				$taskDuration | Add-Member -MemberType NoteProperty -Name StartTime -Value "unknown"
				$taskRunTimeSeconds = -1
				}
			$taskDuration | Add-Member -MemberType NoteProperty -Name RunTimeSeconds -Value $taskRunTimeSeconds
			$taskDurations += $taskDuration
			}
		}
	return $taskDurations
	}

function Get-TaskLastRunLaunchIgnored {
	param ([string]$taskPath, [int]$lookbackSeconds)
	
	#fetch the most recent "Launch request ignored, instance already running" event occured during last execution) that occured within a timeframe
	# in case taskpath contains quotes, have to escape (double) them
	$taskPath = $taskPath.Replace("'","''")
	$ignoredXPath = "*[System[(EventID=322) and TimeCreated[timediff(@SystemTime) <= " + $lookbackSeconds * 1000 + "]]] and *[EventData[(Data[1]='" + $taskPath + "')]]"
#	$taskIgnoredEvent = Get-WinEvent -LogName 'Microsoft-Windows-TaskScheduler/Operational' -FilterXPath $ignoredXPath -MaxEvents 1 -ErrorAction SilentlyContinue 
#	$taskIgnoredEvent = Get-WinEvent -LogName 'Microsoft-Windows-TaskScheduler/Operational' -FilterXPath $ignoredXPath -ErrorAction SilentlyContinue
	$query = New-Object -TypeName System.Diagnostics.Eventing.Reader.EventLogQuery -ArgumentList @('Microsoft-Windows-TaskScheduler/Operational', 1, $ignoredXPath)
    $reader = New-Object -TypeName System.Diagnostics.Eventing.Reader.EventLogReader -ArgumentList $query
    $taskSuccessEvent = $reader.ReadEvent()
    $reader.Dispose()

	if ($taskIgnoredEvent)
		{
		return [datetime]$taskIgnoredEvent.TimeCreated
		}
	else
		{
		#no launch ignored event found within the timeframe; return null
		return [datetime]"1/1/1600"
		}
	}

#PSScheduledJob related functions
function GetScheduledJobResult
	{
	param ([string]$scheduledTaskActionParameter)
	$jobName = $null
	$jobCommand = $null
	$scheduledJobDefinitionStrings = GetScheduledJobDefinitionStrings -scheduledTaskCommand $scheduledTaskActionParameter
	#see if jobdefinition can be loaded (PS >=3.0)
	#    if not (running on PS 2.0), extract the jobName from the task action string
	try {
		#import module to get full support
		if (-not (Get-Module -Name PSScheduledJob))	{Import-Module PSScheduledJob}
		$jobDefinition = [Microsoft.PowerShell.ScheduledJob.ScheduledJobDefinition]::LoadFromStore($scheduledJobDefinitionStrings.Item("jobdefname"), $scheduledJobDefinitionStrings.Item("jobdefpath"))
		$jobName = $jobDefinition.Name
		$jobCommand = $jobDefinition.Command
		}
	catch {
		#when on PS2.0 (SCOM host) LoadFromStore will not work
		$jobName = $scheduledJobDefinitionStrings.Item("jobdefname")
		$jobCommand = $null
		}
	
	$jobResult = New-Object psobject
	$jobResult | Add-Member -MemberType NoteProperty -Name PSJobName -Value $jobName
	$jobResult | Add-Member -MemberType NoteProperty -Name PSJobCommand -Value $jobCommand
				
	#as accessing job results isn't possible for a different user using PSScheduledJob module,
	#   go ahead and parse Results.xml directly
	[string]$jobOutputFolder = ($scheduledJobDefinitionStrings.Item("jobdefpath").Trim() + "\" + $scheduledJobDefinitionStrings.Item("jobdefname").Trim() + "\Output")
	#sort the output files according to their "Status_StopTime" value
	$sortedResultFiles = @(Get-ChildItem $JobOutputFolder -Recurse -Filter "Results.xml" |
		Sort-Object @{Expression={[System.DateTime]([xml](Get-Content -Path $_.FullName -ErrorAction SilentlyContinue)).ScheduledJob.StatusInfo.Status_StopTime.InnerText}; Ascending=$false})	
	#load most recent Results.xml and get result details from it
	if ($sortedResultFiles.Count -gt 0)
		{
		[xml](Get-Content -Path ($sortedResultFiles.Get(0)).FullName -ErrorAction SilentlyContinue) |
			% {
			#in case loading definition failed, attempt to extract name and command from Results.xml
			#    note: will only work if job has ran at least once
			if ($jobName -eq $null) {$jobResult | Add-Member -MemberType NoteProperty -Name PSJobName -Value ($_.ScheduledJob.StatusInfo.Status_Name.InnerText) -Force }
			if ($jobCommand -eq $null) {$jobResult | Add-Member -MemberType NoteProperty -Name PSJobCommand -Value ($_.ScheduledJob.StatusInfo.Status_Command.InnerText) -Force }
			$jobInstanceId = [System.Guid]$_.ScheduledJob.StatusInfo.Status_InstanceId.InnerText
			#should be completed always as it has a StopTime value
			$jobStatus = [System.Management.Automation.JobState]$_.ScheduledJob.StatusInfo.Status_State.InnerText
			$jobStartTime = [System.DateTime]$_.ScheduledJob.StatusInfo.Status_StartTime.InnerText
			$jobEndTime = [System.DateTime]$_.ScheduledJob.StatusInfo.Status_StopTime.InnerText
			$jobRunTimeMinutes = [decimal]::round(($jobEndTime - $jobStartTime).TotalMinutes, 2)
			
			#Results to objects built of strings (so SCOM can work with them)
			$outputItems = GetScheduledJobXMLItemsDetail -resultsType "Output" -xmlElement $_.ScheduledJob.ResultsInfo.Results_Output
			$errorItems = GetScheduledJobXMLItemsDetail -resultsType "Error" -xmlElement $_.ScheduledJob.ResultsInfo.Results_Error
			$warningItems = GetScheduledJobXMLItemsDetail -resultsType "Warning" -xmlElement $_.ScheduledJob.ResultsInfo.Results_Warning
					
			$jobResult | Add-Member -MemberType NoteProperty -Name PSJobStatus -Value $jobStatus
			$jobResult | Add-Member -MemberType NoteProperty -Name PSJobLastRunDurationMinutes -Value $jobRunTimeMinutes
			$jobResult | Add-Member -MemberType NoteProperty -Name PSJobOutputCount -Value $outputItems.Size
			$jobResult | Add-Member -MemberType NoteProperty -Name PSJobOutputTypes -Value $outputItems.ItemTypes
			$jobResult | Add-Member -MemberType NoteProperty -Name PSJobOutputContent -Value $outputItems.ItemContents
			$jobResult | Add-Member -MemberType NoteProperty -Name PSJobErrorCount -Value $errorItems.Size
			$jobResult | Add-Member -MemberType NoteProperty -Name PSJobErrorContent -Value $errorItems.ItemContents
			$jobResult | Add-Member -MemberType NoteProperty -Name PSJobWarningCount -Value $warningItems.Size
			$jobResult | Add-Member -MemberType NoteProperty -Name PSJobWarningContent -Value $warningItems.ItemContents
			}
		}
	return $jobResult
	}

function GetScheduledJobDefinitionStrings
	{
	#get jobdefinitionname and jobdefinitionpath from the scheduled task's command line
	param ($scheduledTaskCommand)
	$scheduledJobDefMatch = "\[Microsoft\.PowerShell\.ScheduledJob\.ScheduledJobDefinition\]::LoadFromStore\(('|"")(?<jobname>.+)('|""),.*('|"")(?<jobstore>.+)('|"")\)"
	$scheduledTaskCommand -match $scheduledJobDefMatch | Out-Null
	# make sure double quotes are replaced
	return @{"jobdefname" = ($Matches.jobname).Replace("''", "'"); "jobdefpath" = ($Matches.jobstore).Replace("''", "'")}
	}
	
function GetScheduledJobXMLItemsDetail
	{
	#get details as count and string of deserialized output.xml content.
	#   deserialization will fail not work on PS 2.0; just count will be available
	param ([string]$resultsType, [System.Xml.XmlElement]$xmlElement)
	
	$itemCount = 0
	$allItemTypeString = ""
	$allItemContentString = ""
	if ($resultsType -eq "Warning") {$global:xmlElement = $xmlElement}
	
	if ($xmlElement.items._items.Size -gt 0)
		{
		foreach ($item in $xmlElement.items._items.ChildNodes)
			{
			#undo CliXML to get original object back
			if ($item.IsEmpty -eq $false)
				{
				$itemCount ++
				
				#PS 3.0 and later support Deserialize so we can get the actual objects and see about presenting them in string
				#     note: PS 1.0 workflows (Windows 2008) will never suppport PS Scheduled Jobs (requires PS >=3.0 be installed)
				#     on Windows 2008 R2 this script may run in 2.0 even when >=3.0 are installed locally (SCOM agent limitation).
				if ([string]$PSVersionTable.PSVersion -notmatch "^2\.")
					{
					switch ($resultsType) {
					"Output" {
						$itemDeserialized = [System.Management.Automation.PSSerializer]::Deserialize($item.clixml.InnerText)
						#return the type
						$itemTypeString = $null
						#some items do not support GetType() but have a ToSting()
						try { $itemTypeString = $itemDeserialized.GetType().FullName }
						catch {
							try { $itemTypeString = $itemDeserialized.ToString() }
							catch {$itemTypeString = "UnknownObject" }
						}
						$allItemTypeString = $allItemTypeString + $itemTypeString + " ||| "
						
						#see if the object can be converted to string (e.g. script output)
						try {
							$itemContentString = [System.String]$itemDeserialized
							}
						catch	{
							$itemContentString = [System.String]"'" + ($itemDeserialized.GetType().FullName) + "' can not be converted to a string object."
							}
						#truncate output if longer than 1024 characters
						if ($itemContentString.length -gt 1024) {$itemContentString = $itemContentString.Substring(0, 1024).trim()}
						$allItemContentString = $allItemContentString + $itemContentString + " ||| "
						}
					"Error" {
						$itemDeserialized = [System.Management.Automation.PSSerializer]::Deserialize($item.clixml.InnerText)
						
						#return the type
						$allItemTypeString = $allItemTypeString + $itemDeserialized.Exception.SerializedRemoteInvocationInfo.InvocationName + " ||| "
						#see if the exception can be converted to string (e.g. script output)
						try {
							$itemContentString = [System.String]$itemDeserialized.Exception.SerializedRemoteException
							}
						catch	{
							$itemContentString = [System.String]"Exception can not be converted to a string object."
							}
						if ($itemContentString.length -gt 1024) {$itemContentString = $itemContentString.Substring(0, 1024).trim()}
						$allItemContentString = $allItemContentString + $itemContentString + " ||| "
						}
					"Warning" {
						#warning seems to be string natively
						$allItemTypeString = $allItemTypeString + "System.Management.Automation.WarningRecord" + " ||| "
						
						#see if the warning record can be converted to string
						try {
							$itemContentString = [System.String]$item.message.'#text'
							}
						catch	{
							$itemContentString = [System.String]"Warning can not be converted to a string object."
							}
						#truncate output if longer than 1024 characters
						if ($itemContentString.length -gt 1024) {$itemContentString = $itemContentString.Substring(0, 1024).trim()}
						$allItemContentString = $allItemContentString + $itemContentString + " ||| "
						}
					}		
					}
				}
			}
			#clean last separator and shorten to a total of 8192 characters
			if ($allItemTypeString.length -gt 0) {
				$allItemTypeString = ($allItemTypeString.Substring(0,$allItemTypeString.length - 5)).trim()
				if ($allItemTypeString.length -gt 8192) {$allItemTypeString = $allItemTypeString.Substring(0, 8192)}
				}
			if ($allItemContentString.length -gt 0) {
				$allItemContentString = ($allItemContentString.Substring(0,$allItemContentString.length - 5)).trim()
				if ($allItemContentString.length -gt 8192) {$allItemContentString = $allItemContentString.Substring(0, 8192)}
				}
		}	
	$itemDetail = New-Object psobject
	$itemDetail | Add-Member -MemberType NoteProperty -Name ResultsType -Value $resultsType
	$itemDetail | Add-Member -MemberType NoteProperty -Name Size -Value $itemCount
	$itemDetail | Add-Member -MemberType NoteProperty -Name ItemTypes -Value $allItemTypeString
	$itemDetail | Add-Member -MemberType NoteProperty -Name ItemContents -Value $allItemContentString
	
	Return $itemDetail
	}


#region constvar
#constants & variables
$TASK_STATE_0 = "Unknown"
$TASK_STATE_1 = "Disabled"
# make 2, 3 and 4 use the SAME string (to avoid changing SCOM objet properties too often)
#$TASK_STATE_2 = "Queued""
$TASK_STATE_2 = "Ready / Queued / Running"
#$TASK_STATE_3 = "Ready""
$TASK_STATE_3 = "Ready / Queued / Running"
#$TASK_STATE_4 = "Running"
$TASK_STATE_4 = "Ready / Queued / Running"

$TASK_ACTION_0 = "Start a program" 		#"Exec" 		Represents an action that executes a command-line operation
$TASK_ACTION_0_PS = "PS job"		    #""Exec"        Added to allow flagging PSJobs
$TASK_ACTION_5 = "Custom handler" 		#"ComHandler"	This action fires a handler
$TASK_ACTION_6 = "Send an e-mail"		#"This action sends an e-mail"
$TASK_ACTION_7 = "Display a message" 	#"ShowMessage"	This action shows a message box


$TRIGGER_TYPE_0 = "On event" 							#"TASK_TRIGGER_EVENT" 				'"Starts the task when a specific event occurs"
$TRIGGER_TYPE_1 = "One time" 							#"TASK_TRIGGER_TIME" 					'"Starts the task at a specific time of day"
$TRIGGER_TYPE_2 = "Daily" 								#"TASK_TRIGGER_DAILY" 				'"Starts the task daily"
$TRIGGER_TYPE_3 = "Weekly" 								#"TASK_TRIGGER_WEEKLY" 				'"Starts the task weekly"
$TRIGGER_TYPE_4 = "Monthly" 							#"TASK_TRIGGER_MONTHLY" 				'"Starts the task monthly"
$TRIGGER_TYPE_5 = "Monthly at day of week"  			#"TASK_TRIGGER_MONTHLYDOW" 			'"Starts the task every month on a specific day of the week"
$TRIGGER_TYPE_6 = "On idle" 							#"TASK_TRIGGER_IDLE" 					'"Starts the task when the computer goes into an idle state"
$TRIGGER_TYPE_7 = "At task creation/modification" 		#"TASK_TRIGGER_REGISTRATION" 			'"Starts the task when the task is registered"
$TRIGGER_TYPE_8 = "At startup" 							#"TASK_TRIGGER_BOOT" 					'"Starts the task when the computer boots"
$TRIGGER_TYPE_9 = "At log on" 							#"TASK_TRIGGER_LOGON" 				'"Starts the task when a specific user logs on"
$TRIGGER_TYPE_11 = "TASK_TRIGGER_SESSION_STATE_CHANGE"	#"Triggers the task when a specific session state changes"
$TRIGGER_STATE_CHANGE_1 = "On connection to console session"		#TASK_CONSOLE_CONNECT
$TRIGGER_STATE_CHANGE_2 = "On disconnect from console session"		#TASK_CONSOLE_DISCONNECT
$TRIGGER_STATE_CHANGE_3 = "On connect to user session"				#TASK_REMOTE_CONNECT
$TRIGGER_STATE_CHANGE_4 = "On disconnect from user session"			#TASK_REMOTE_DISCONNECT
$TRIGGER_STATE_CHANGE_7 = "On workstation lock"						#TASK_SESSION_LOCK
$TRIGGER_STATE_CHANGE_8 = "On workstation unlock"					#TASK_SESSION_UNLOCK
#endregion

#region SCOMvar
#prepare SCOM stuff
$objAPI = New-Object -ComObject "MOM.ScriptAPI"
#convert SCOM "text" boolean
if ($discoverWindowsTasks -eq 'true') {$discoverWindowsTasks = $true} else {$discoverWindowsTasks = $false}
if ($debugParam -eq 'true') {$debugParam = $true} else {$debugParam = $false}
#endregion

#region main
#debug output with calling parameters & PS environment
if ($debugParam -eq $true)
	{
	$objAPI.LogScriptEvent($scriptName, 9620, 4, "DEBUG: Calling script:

Parameter
------------
discoverWindowsTasks: " + [string]$discoverWindowsTasks + "
lastRunDurationLookback: " + [string]$lastRunDurationLookback + "

Environment
-------------
OS Version: " + [System.Environment]::OSVersion.VersionString + "
PS Version: " + [string]$PSVersionTable.PSVersion + "
PS Host Name: " +  [string]$host.Name + "
PS Host Version: " + [string]$host.Version)
	}
	
#check if running on Windows 6.x (Server 2008 / Vista) or higher
if ([System.Environment]::OSVersion.Version.Major -lt 6) {
	if ($debugParam -eq $true) {$objAPI.LogScriptEvent($scriptName, 9621, 2, "DEBUG: Script returning empty bag as it is running on Windows " + [System.Environment]::OSVersion.VersionString + ". Windows 6.0 and higher are supported (>= Server 2008 / Vista). For legacy OS the Custom.Windows.TaskScheduler.Windows2003.Monitoring MP can be used.")}
	#return an empty property bag (make undiscovery possible)
	$objTaskBag = $objAPI.CreatePropertyBag() 
	$objTaskBag
	exit 0
	}

#what PowerShell version we're on?
#    need PS 1.0 workable (doesn't know the PSVersionTable)
#what PowerShell version we're on?
$PSVersionString = [string]$PSVersionTable.PSVersion
if (!$PSVersionString) {$PSVersionString = "1.0"}

# no PS 1.0 support in SCOM 2012!
#if PS 1.0 is running on Windows 2008 (6.0) then warn and disable event support
#if (($PSVersionString -match "^1\.") -and ([System.Environment]::OSVersion.Version.Major -eq 6) -and ([System.Environment]::OSVersion.Version.Minor -eq 0))
#	{
#	$windowsEventSupport = 0
#	$objAPI.LogScriptEvent($scriptName, 9622, 2, "WARNING: Script running in PowerShell version " + $PSVersionString + " on " + [System.Environment]::OSVersion.VersionString + ".
#
#In order to fully support this management pack, consider upgrading PowerShell via ""Windows Management Framework"" to 2.0 or 3.0.
#
#As is, the MP will note be able to collect the task's exact execution time. Instead an estimated value will be returned.")
#	}

# PS 2.0 is running on Windows Server 2008 or 2008 R2; just inform in debug mode 
if ( ($debugParam -eq $true) -and ($PSVersionString -match "^2\.") -and ([System.Environment]::OSVersion.Version.Major -eq 6) -and ([System.Environment]::OSVersion.Version.Minor -le 1))
	{
	$windowsEventSupport = 1
	$objAPI.LogScriptEvent($scriptName, 9623, 4, "INFORMATION: Script running in PowerShell version " + $PSVersionString + " on " + [System.Environment]::OSVersion.VersionString + ".

PS Scheduled Job monitors will not be showing details on the nature of PS exceptions but return simply the number of exceptions that occured.

Note: SCOM 2012 agents on Windows Server 2008 and 2008 R2 will run PowerShell code in a 2.0 host even if PowerShell 3.0 or later is installed. SCOM management servers and gateways will use higher versions if it is installed locally.")
	}
else {$windowsEventSupport = 1}

#getting scheduled task info in PowerShell 1.0 and 2.0 requires COM object "Schedule.Service"
#    the cmdlets were only introduced in Server 2012 / Windows 8
#    as this script needs to run on Server 2008 / Vista as well just continue to use
#    COM.
$ErrorActionPreference = "SilentlyContinue"
$schedule = New-Object -ComObject "Schedule.Service"
$schedule.Connect() 

$objRootFolder = $schedule.GetFolder("\")
$ErrorActionPreference = "Continue"
If (($schedule -eq $null) -or ($objRootFolder.Name -eq ""))
	{
	#failed to connect this time. Write a warning and quit.
	#Keeps OpsMgr from deleting already discovered objects if the provider fails temporarily
	$objAPI.LogScriptEvent($scriptName, 9624, 2, "WARNING: Discovery script failed to access the Task Scheduler COM object ""Schedule.Service"". It is exiting without writing data.")
	}
Else
	{
	#enumerate root folder
	$tasks = @(Get-AllTasks -path $objRootFolder.Path -lastRunDurationLookback $lastRunDurationLookback -eventSupport $windowsEventSupport)
	if ($tasks.Count -gt 0) {
		foreach ($task in $tasks)
			{
			#build a SCOM property bag
			$objTaskBag = $objAPI.CreatePropertyBag() 
			$objTaskBag.AddValue("IsPSScheduledJob", [string]$task.IsPSScheduledJob)
			$objTaskBag.AddValue("Name", [string]$task.Name)
			$objTaskBag.AddValue("Path", [string]$task.Path)
			$objTaskBag.AddValue("Author", [string]$task.Author)
			$objTaskBag.AddValue("User", [string]$task.User)
			$objTaskBag.AddValue("Description", [string]$task.Description)
			$objTaskBag.AddValue("Hidden", [string]$task.Hidden)
			$objTaskBag.AddValue("LastRunTime", [string]$task.LastRunTime)
			$objTaskBag.AddValue("NextRunTime", [string]$task.NextRunTime)
			$objTaskBag.AddValue("LastTaskResult", [string]$task.LastTaskResult)
			$objTaskBag.AddValue("LastTaskResultHex", [string]$task.LastTaskResultHex)
			$objTaskBag.AddValue("State", [int]$task.State)
			$objTaskBag.AddValue("StateText", [string]$task.StateText)
			$objTaskBag.AddValue("TaskIsScheduled", [string]$task.TaskIsScheduled)
			$objTaskBag.AddValue("TriggerText", [string]$task.TriggerText)
			$objTaskBag.AddValue("ActionText", [string]$task.ActionText)
			$objTaskBag.AddValue("LastRunDurationSeconds", [double]$task.LastRunDurationSeconds)
			$objTaskBag.AddValue("LastRunDurationMinutes", [double]$task.LastRunDurationMinutes)
			$objTaskBag.AddValue("CurrentRunDurationMinutes", [double]$task.CurrentRunDurationMinutes)
			$objTaskBag.AddValue("LaunchRequestSkipped", [string]$task.LaunchRequestSkippedDuringExecution)	
			$objTaskBag.AddValue("DiscoverWindowsTasksSetting", [string]$discoverWindowsTasks)
			#PSscheduledJob
			$objTaskBag.AddValue("PSJobName", [string]$task.PSJobName)
			$objTaskBag.AddValue("PSJobCommand", [string]$task.PSJobCommand)
			$objTaskBag.AddValue("PSJobOutputCount", [int]$task.PSJobOutputCount)
			$objTaskBag.AddValue("PSJobOutputTypes", [string]$task.PSJobOutputTypes)
			$objTaskBag.AddValue("PSJobOutputContent", [string]$task.PSJobOutputContent)
			$objTaskBag.AddValue("PSJobErrorCount", [int]$task.PSJobErrorCount)
			$objTaskBag.AddValue("PSJobErrorContent", [string]$task.PSJobErrorContent)
			$objTaskBag.AddValue("PSJobWarningCount", [int]$task.PSJobWarningCount)
			$objTaskBag.AddValue("PSJobWarningContent", [string]$task.PSJobWarningContent)
			$objTaskBag
			}
		}
	else {
		#return an empty property bag (make undiscovery possible)
		$objTaskBag = $objAPI.CreatePropertyBag() 
		$objTaskBag
		}
	}

# Close com (fails on PS 1.0)
$ErrorActionPreference = "SilentlyContinue"
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($schedule) | Out-Null
Remove-Variable schedule

Remove-Variable debugParam
Remove-Variable discoverWindowsTasks
Remove-Variable foreach
Remove-Variable lastRunDurationLookback
Remove-Variable objAPI
Remove-Variable objRootFolder
Remove-Variable objTaskBag
Remove-Variable PSVersionString
Remove-Variable schedule
Remove-Variable scriptName
Remove-Variable startvars
Remove-Variable task
Remove-Variable TASK_ACTION_0
Remove-Variable TASK_ACTION_0_PS
Remove-Variable TASK_ACTION_5
Remove-Variable TASK_ACTION_6
Remove-Variable TASK_ACTION_7
Remove-Variable TASK_STATE_0
Remove-Variable TASK_STATE_1
Remove-Variable TASK_STATE_2
Remove-Variable TASK_STATE_3
Remove-Variable TASK_STATE_4
Remove-Variable tasks
Remove-Variable taskSuccessEvent
Remove-Variable TRIGGER_STATE_CHANGE_1
Remove-Variable TRIGGER_STATE_CHANGE_2
Remove-Variable TRIGGER_STATE_CHANGE_3
Remove-Variable TRIGGER_STATE_CHANGE_4
Remove-Variable TRIGGER_STATE_CHANGE_7
Remove-Variable TRIGGER_STATE_CHANGE_8
Remove-Variable TRIGGER_TYPE_0
Remove-Variable TRIGGER_TYPE_1
Remove-Variable TRIGGER_TYPE_11
Remove-Variable TRIGGER_TYPE_2
Remove-Variable TRIGGER_TYPE_3
Remove-Variable TRIGGER_TYPE_4
Remove-Variable TRIGGER_TYPE_5
Remove-Variable TRIGGER_TYPE_6
Remove-Variable TRIGGER_TYPE_7
Remove-Variable TRIGGER_TYPE_8
Remove-Variable TRIGGER_TYPE_9
Remove-Variable windowsEventSupport


]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>scriptName</Name>
                    <Value>Custom.TaskScheduler2.Task.GetTaskAndJobsProperties.ps1</Value>
                  </Parameter>
                  <Parameter>
                    <Name>discoverWindowsTasks</Name>
                    <Value>$Config/DiscoverWindowsTasks$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>lastRunDurationLookback</Name>
                    <Value>$Config/LastRunDurationLookback$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>debugParam</Name>
                    <Value>$Config/Debug$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="TaskBagProbe" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <TriggerOnly>true</TriggerOnly>
      </ProbeActionModuleType>
      <WriteActionModuleType ID="Custom.TaskScheduler2.Task.EnableTaskHistory.WriteAction" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="ScriptWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Custom.TaskScheduler2.Task.EnableTaskSchedulerHistory.ps1</ScriptName>
                <ScriptBody><![CDATA[# Enables Task Scheduler History
#
#	sets event log flag
#
# Version 1.0 - 01. July 2014 - initial            			  - Raphael Burri - raburri@bluewin.ch

param ( [string]$scriptName = 'Custom.TaskScheduler2.Task.EnableTaskSchedulerHistory.ps1')

#region constvar
#constants & variables
$FLAG_KEY = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-TaskScheduler/Operational"
$FLAG_VALUE = "Enabled"
#endregion

#region main
$currentvalue = (Get-ItemProperty -Path $FLAG_KEY -Name $FLAG_VALUE -ErrorAction SilentlyContinue).Enabled

if ($currentvalue -eq $null) { Write-Host "WARNING: Task Scheduler History Event Log key does not exist." }
elseif ($currentvalue -eq 1) { Write-Host "INFORMATION: Task Scheduler History is already enabled. No action required." }
else {
	#enable history
	Set-ItemProperty -Path $FLAG_KEY -Name $FLAG_VALUE -Value 1 -ErrorAction SilentlyContinue
	#verify
	$currentvalue = (Get-ItemProperty -Path $FLAG_KEY -Name $FLAG_VALUE -ErrorAction SilentlyContinue).Enabled
	if ($currentvalue -eq 1) { Write-Host "SUCCESS: Task Scheduler History is now enabled." }
	else { Write-Host "WARNING: Failed to enable Task Scheduler History. The current user does not have write access to the system's registry. Make sure you run this task/recovery with a user account that has administrative access rights." }
	}

#endregion
]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>scriptName</Name>
                    <Value>Custom.TaskScheduler2.Task.EnableTaskSchedulerHistory.ps1</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="ScriptWA"></Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Custom.TaskScheduler2.Task.WorkflowTriggerEvent.WriteAction" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="WaitTime" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ManagementPackName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ManagementGroupName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="EventId" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="EventType" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="EventCount" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeWindowStart" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeWindowEnd" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="ScriptWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Custom.TaskScheduler2.Task.WorkflowTriggerEvent.ps1</ScriptName>
                <ScriptBody><![CDATA[# Custom.TaskScheduler2.Task.WorkflowTriggerEvent.ps1
# 
# Writes an entry to SCOM event log (with extra parameters)
#
# Parameters:

param ($scriptName = 'Custom.TaskScheduler2.Task.WorkflowTriggerEvent.ps1',
	$eventId = '1005',
	$waitTime = '300',
	$mpName = 'Custom.Windows.TaskScheduler.Windows2008.Monitoring',
	$mgName = 'none',
	$eventType = 'unknownType',
	$eventCount = '0',
	$timeStart = '',
	$timeEnd = '')

Function WriteEventLogEntry
{
	param ([string]$EventSourceName,
		$EventId,
		[string]$EventSeverity,
		[string]$EventDescription,
		[string]$EventParameter1,
		[string]$EventParameter2,
		[string]$EventParameter3,
		[string]$EventParameter4,
		[string]$EventParameter5,
		[string]$EventParameter6,
		[string]$EventParameter7,
		[string]$EventParameter8
		) 
	# using .NET objects as they allow event parameters
	$newEvent = new-object System.Diagnostics.Eventinstance($EventId, 0, [system.diagnostics.eventlogentrytype]::[string]$EventSeverity) 
	[System.diagnostics.EventLog]::WriteEvent([string]$EventSourceName, $newEvent, $EventDescription, $EventParameter1, $EventParameter2, $EventParameter3, $EventParameter4, $EventParameter5, $EventParameter6, $EventParameter7, $EventParameter8)
	
}

WriteEventLogEntry -EventSourceName 'Health Service Script' -EventId $eventId -EventSeverity 'Information' -EventDescription 'Windows TaskScheduler MP Helper Event.
This event is used to trigger Task Scheduler MP workflows.
Management Pack: %4
Management Group: %5

EventType: %6
EventCount: %7

TimeWindowStart: %8
TimeWindowEnd: %9

' -EventParameter1 $ScriptName -EventParameter2 $waitTime -EventParameter3 $MPName -EventParameter4 $MGName -EventParameter5 $eventType -EventParameter6 $eventCount -EventParameter7 $timeStart -EventParameter8 $timeEnd
]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>scriptName</Name>
                    <Value>Custom.TaskScheduler2.Task.WorkflowTriggerEvent.ps1</Value>
                  </Parameter>
                  <Parameter>
                    <Name>waitTime</Name>
                    <Value>$Config/WaitTime$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>mpName</Name>
                    <Value>$Config/ManagementPackName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>mgName</Name>
                    <Value>$Config/ManagementGroupName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>eventId</Name>
                    <Value>$Config/EventId$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>eventType</Name>
                    <Value>$Config/EventType$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>eventCount</Name>
                    <Value>$Config/EventCount$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>timeStart</Name>
                    <Value>$Config/TimeWindowStart$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>timeEnd</Name>
                    <Value>$Config/TimeWindowEnd$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="ScriptWA"></Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="NoError" NoDetection="false" />
          <MonitorTypeState ID="Error" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TaskPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="maxErrorCount" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WindowsTasks" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="maxErrorCount" Selector="$Config/maxErrorCount$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <!-- trigger on events: either agent start or after tasks have ended                                         -->
            <!--     the latter are written by the rule Custom.TaskScheduler2.Task.TaskActionObserved.EventCreation.Rule -->
            <DataSource ID="EventDS" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent.DS">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <LogName>Operations Manager</LogName>
              <Expression>
                <Or>
                  <Expression>
                    <And>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(1004|1005|1006)$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">PublisherName</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Health Service Script</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Script Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Custom.TaskScheduler2.Task.WorkflowTriggerEvent.ps1</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- MP Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[4]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Custom.Windows.TaskScheduler.Windows2008.Monitoring</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Management Group Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[5]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="UnsignedInteger">2002</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">PublisherName</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">HealthService</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Management Group Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                    </And>
                  </Expression>
                </Or>
              </Expression>
              <Consolidator>
                <ConsolidationProperties />
                <TimeControl>
                  <!-- wait for delayed events -->
                  <Latency>10</Latency>
                  <!-- don't wait for backlogged items -->
                  <DrainWait>0</DrainWait>
                  <WithinTimeSchedule>
                    <!-- don't call script more than once 10 seconds -->
                    <Interval>10</Interval>
                  </WithinTimeSchedule>
                </TimeControl>
                <!-- output only after the latency has passed -->
                <!--     will output any input item (if any) that has happened -->
                <CountingCondition>
                  <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                </CountingCondition>
              </Consolidator>
            </DataSource>
            <ProbeAction ID="ScriptProbe" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.ScriptProbe">
              <!-- return any task; in case they've been discovered they'll be monitored as well -->
              <DiscoverWindowsTasks>$Config/WindowsTasks$</DiscoverWindowsTasks>
              <!-- look back maximum 15 minutes -->
              <LastRunDurationLookback>900</LastRunDurationLookback>
              <Debug>$Config/Debug$</Debug>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </ProbeAction>
            <!-- Task is: Ready AND has run in the past AND LastTaskResult is valid-->
            <!--       OR                                                       -->
            <!--     Unknown/Disabled                                           -->
            <!--     has never run                                              -->
            <!--     has no active triggers                                     -->
            <ConditionDetection ID="ExceptionCountOK" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <Or>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="Integer">3</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='LastRunTime']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="String">HasDate</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='PSJobErrorCount']</XPathQuery>
                              </ValueExpression>
                              <Operator>LessEqual</Operator>
                              <ValueExpression>
                                <Value>$Config/maxErrorCount$</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                        </And>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(0|1)$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='LastRunTime']</XPathQuery>
                          </ValueExpression>
                          <Operator>NotEqual</Operator>
                          <ValueExpression>
                            <Value Type="String">HasDate</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='TriggerText']</XPathQuery>
                          </ValueExpression>
                          <Operator>DoesNotContainSubstring</Operator>
                          <Pattern>True: </Pattern>
                        </RegExExpression>
                      </Expression>
                    </Or>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <!-- Task is: Ready AND has run in the past AND LastTaskResult is not valid-->
            <!--       AND                                                              -->
            <!--     has run                                                           -->
            <!--     has active triggers                                                -->
            <ConditionDetection ID="ExceptionCountHigh" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="Integer">3</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='LastRunTime']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">HasDate</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='PSJobErrorCount']</XPathQuery>
                      </ValueExpression>
                      <Operator>Greater</Operator>
                      <ValueExpression>
                        <Value>$Config/maxErrorCount$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='TriggerText']</XPathQuery>
                      </ValueExpression>
                      <Operator>ContainsSubstring</Operator>
                      <Pattern>True: </Pattern>
                    </RegExExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="NoError">
              <Node ID="ExceptionCountOK">
                <Node ID="ScriptProbe">
                  <Node ID="EventDS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Error">
              <Node ID="ExceptionCountHigh">
                <Node ID="ScriptProbe">
                  <Node ID="EventDS" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Custom.Windows.TaskSchedulerV2.Registry2StateMonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="FirstCondition" />
          <MonitorTypeState ID="SecondCondition" />
        </MonitorTypeStates>
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
            <SchemaType>Windows!Microsoft.Windows.RegistryAttributeDefinitionsSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WindowsVersionRegEx" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="RegistryAttributeDefinitions" type="RegistryAttributeDefinitionsType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Frequency" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="FirstExpression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SecondExpression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <MonitorImplementation>
          <MemberModules>
            <DataSource TypeID="System!System.Scheduler" ID="Scheduler">
              <Scheduler>
                <SimpleReccuringSchedule>
                  <Interval Unit="Seconds">$Config/Frequency$</Interval>
                </SimpleReccuringSchedule>
                <ExcludeDates />
              </Scheduler>
            </DataSource>
            <ProbeAction TypeID="Windows!Microsoft.Windows.RegistryProbe" ID="Probe1">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <RegistryAttributeDefinitions>
                <!-- Windows Version -->
                <RegistryAttributeDefinition>
                  <AttributeName>CurrentVersion</AttributeName>
                  <Path>SOFTWARE\Microsoft\Windows NT\CurrentVersion\CurrentVersion</Path>
                  <PathType>1</PathType>
                  <AttributeType>1</AttributeType>
                  <RegistryView>Default</RegistryView>
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
            </ProbeAction>
            <ProbeAction TypeID="Windows!Microsoft.Windows.RegistryProbe" ID="Probe2">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <RegistryAttributeDefinitions>$Config/RegistryAttributeDefinitions$</RegistryAttributeDefinitions>
            </ProbeAction>
            <ConditionDetection TypeID="System!System.ExpressionFilter" ID="OSFilter">
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/CurrentVersion</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>$Config/WindowsVersionRegEx$</Pattern>
                </RegExExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection TypeID="System!System.ExpressionFilter" ID="FirstFilterCondition">
              <Expression>$Config/FirstExpression$</Expression>
            </ConditionDetection>
            <ConditionDetection TypeID="System!System.ExpressionFilter" ID="SecondFilterCondition">
              <Expression>$Config/SecondExpression$</Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="FirstCondition">
              <Node ID="FirstFilterCondition">
                <Node ID="Probe2">
                  <Node ID="OSFilter">
                    <Node ID="Probe1">
                      <Node ID="Scheduler" />
                    </Node>
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="SecondCondition">
              <Node ID="SecondFilterCondition">
                <Node ID="Probe2">
                  <Node ID="OSFilter">
                    <Node ID="Probe1">
                      <Node ID="Scheduler" />
                    </Node>
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Custom.Windows.ScheduledTaskV2.DiscoveryData.NextRun.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="HasDate" NoDetection="false" />
          <MonitorTypeState ID="Never" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TaskPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WindowsTasks" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <!-- triggered by:
       - task ending events (from 1005 in Operations Manager log)
       - hourly schedule (1004)
       - task configuration changed (1006)
       -->
            <DataSource ID="EventDS" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent.DS">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <LogName>Operations Manager</LogName>
              <Expression>
                <Or>
                  <Expression>
                    <And>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(1004|1005|1006)$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">PublisherName</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Health Service Script</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Script Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Custom.TaskScheduler2.Task.WorkflowTriggerEvent.ps1</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- MP Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[4]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Custom.Windows.TaskScheduler.Windows2008.Monitoring</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Management Group Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[5]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="UnsignedInteger">2002</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">PublisherName</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">HealthService</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Management Group Name -->
                      <!--
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      -->
                    </And>
                  </Expression>
                </Or>
              </Expression>
              <Consolidator>
                <ConsolidationProperties />
                <TimeControl>
                  <!-- wait for delayed events -->
                  <Latency>10</Latency>
                  <!-- don't wait for backlogged items -->
                  <DrainWait>0</DrainWait>
                  <WithinTimeSchedule>
                    <!-- don't call script more than once 10 seconds -->
                    <Interval>10</Interval>
                  </WithinTimeSchedule>
                </TimeControl>
                <!-- output only after the latency has passed -->
                <!--     will output any input item (if any) that has happened -->
                <CountingCondition>
                  <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                </CountingCondition>
              </Consolidator>
            </DataSource>
            <ProbeAction ID="ScriptProbe" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.ScriptProbe">
              <DiscoverWindowsTasks>$Config/WindowsTasks$</DiscoverWindowsTasks>
              <!-- look back maximum 15 minutes -->
              <LastRunDurationLookback>900</LastRunDurationLookback>
              <Debug>$Config/Debug$</Debug>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </ProbeAction>
            <ConditionDetection ID="NotNeverReturned" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='TaskIsScheduled']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">true</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <Or>
                      <Expression>
                        <And>
                          <Expression>
                            <RegExExpression>
                              <ValueExpression>
                                <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                              </ValueExpression>
                              <Operator>MatchesRegularExpression</Operator>
                              <Pattern>^(2|3|4)$</Pattern>
                            </RegExExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='NextRunTime']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="String">HasDate</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                        </And>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(0|1)$</Pattern>
                        </RegExExpression>
                      </Expression>
                    </Or>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="NeverReturned" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='TaskIsScheduled']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">true</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                      </ValueExpression>
                      <Operator>MatchesRegularExpression</Operator>
                      <Pattern>^(2|3|4)$</Pattern>
                    </RegExExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='NextRunTime']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="String">HasDate</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='TriggerText']</XPathQuery>
                      </ValueExpression>
                      <Operator>ContainsSubstring</Operator>
                      <Pattern>True: </Pattern>
                    </RegExExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="HasDate">
              <Node ID="NotNeverReturned">
                <Node ID="ScriptProbe">
                  <Node ID="EventDS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Never">
              <Node ID="NeverReturned">
                <Node ID="ScriptProbe">
                  <Node ID="EventDS" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Custom.TaskScheduler2.Task.ExecutionSkipped.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <!--
          <MonitorTypeState ID="TaskStarted" NoDetection="false" />
          -->
          <MonitorTypeState ID="NoExecutionSkipped" NoDetection="false" />
          <MonitorTypeState ID="ExecutionSkipped" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TaskPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WindowsTasks" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="TaskAlreadyRunningWarnEvent" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent.DS">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <LogName>Microsoft-Windows-TaskScheduler/Operational</LogName>
              <Expression>
                <And>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                      </ValueExpression>
                      <Operator>MatchesRegularExpression</Operator>
                      <Pattern>^(322)$</Pattern>
                    </RegExExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">EventSourceName</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">Microsoft-Windows-TaskScheduler</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">EventData/DataItem/EventData/Data[@Name='TaskName']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
              <Consolidator>
                <ConsolidationProperties>
                  <PropertyXPathQuery>&gt;EventData/DataItem/EventData/Data[@Name='TaskName']</PropertyXPathQuery>
                </ConsolidationProperties>
                <TimeControl>
                  <!-- wait for delayed events -->
                  <Latency>10</Latency>
                  <!-- don't wait for backlogged items -->
                  <DrainWait>0</DrainWait>
                  <WithinTimeSchedule>
                    <!-- don't trigger state change more often than every 5 minutes -->
                    <Interval>300</Interval>
                  </WithinTimeSchedule>
                </TimeControl>
                <!-- output immediately when count is reached, then wait for timeout -->
                <!--     will output only if count has been reached -->
                <CountingCondition>
                  <Count>2</Count>
                  <CountMode>OnNewItemTestOutputRestart_OnTimerRestart</CountMode>
                </CountingCondition>
              </Consolidator>
            </DataSource>
            <!-- trigger on events: either agent start or after tasks have ended                                         -->
            <!--     the latter are written by the rule Custom.TaskScheduler2.Task.TaskActionObserved.EventCreation.Rule -->
            <DataSource ID="EventDS" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent.DS">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <LogName>Operations Manager</LogName>
              <Expression>
                <Or>
                  <Expression>
                    <And>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(1004|1005|1006)$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">PublisherName</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Health Service Script</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Script Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Custom.TaskScheduler2.Task.WorkflowTriggerEvent.ps1</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- MP Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[4]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Custom.Windows.TaskScheduler.Windows2008.Monitoring</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Management Group Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[5]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="UnsignedInteger">2002</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">PublisherName</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">HealthService</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Management Group Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                    </And>
                  </Expression>
                </Or>
              </Expression>
              <Consolidator>
                <ConsolidationProperties />
                <TimeControl>
                  <!-- wait for delayed events -->
                  <Latency>10</Latency>
                  <!-- don't wait for backlogged items -->
                  <DrainWait>0</DrainWait>
                  <WithinTimeSchedule>
                    <!-- don't call script more than once 10 seconds -->
                    <Interval>10</Interval>
                  </WithinTimeSchedule>
                </TimeControl>
                <!-- output only after the latency has passed -->
                <!--     will output any input item (if any) that has happened -->
                <CountingCondition>
                  <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                </CountingCondition>
              </Consolidator>
            </DataSource>
            <ProbeAction ID="ScriptProbe" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.ScriptProbe">
              <!-- return any task; in case they've been discovered they'll be monitored as well -->
              <DiscoverWindowsTasks>$Config/WindowsTasks$</DiscoverWindowsTasks>
              <!-- look back maximum 15 minutes -->
              <LastRunDurationLookback>900</LastRunDurationLookback>
              <Debug>$Config/Debug$</Debug>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </ProbeAction>
            <!-- Task is: Ready AND has run in the past AND LaunchRequestSkipped is false -->
            <!--       OR                                                                 -->
            <!--     Unknown/Disabled                                                     -->
            <!--     has never run                                                        -->
            <!--     has no active triggers                                               -->
            <ConditionDetection ID="NoLaunchIgnored" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <Or>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="Integer">3</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='LastRunTime']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="String">HasDate</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <RegExExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='LaunchRequestSkipped']</XPathQuery>
                              </ValueExpression>
                              <Operator>MatchesRegularExpression</Operator>
                              <Pattern>False</Pattern>
                            </RegExExpression>
                          </Expression>
                        </And>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(0|1)$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='LastRunTime']</XPathQuery>
                          </ValueExpression>
                          <Operator>NotEqual</Operator>
                          <ValueExpression>
                            <Value Type="String">HasDate</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='TriggerText']</XPathQuery>
                          </ValueExpression>
                          <Operator>DoesNotContainSubstring</Operator>
                          <Pattern>True: </Pattern>
                        </RegExExpression>
                      </Expression>
                    </Or>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="NoExecutionSkipped">
              <Node ID="NoLaunchIgnored">
                <Node ID="EventDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="ExecutionSkipped">
              <Node ID="TaskAlreadyRunningWarnEvent" />
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Custom.Windows.ScheduledTaskV2.DiscoveryData.LastResult.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="NoFailure" NoDetection="false" />
          <MonitorTypeState ID="Failure" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TaskPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="DesiredReturnCode" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WindowsTasks" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="DesiredReturnCode" Selector="$Config/DesiredReturnCode$" ParameterType="string" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <!-- trigger on events: either agent start or after tasks have ended                                         -->
            <!--     the latter are written by the rule Custom.TaskScheduler2.Task.TaskActionObserved.EventCreation.Rule -->
            <DataSource ID="EventDS" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent.DS">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <LogName>Operations Manager</LogName>
              <Expression>
                <Or>
                  <Expression>
                    <And>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(1004|1005|1006)$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">PublisherName</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Health Service Script</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Script Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Custom.TaskScheduler2.Task.WorkflowTriggerEvent.ps1</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- MP Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[4]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Custom.Windows.TaskScheduler.Windows2008.Monitoring</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Management Group Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[5]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="UnsignedInteger">2002</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">PublisherName</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">HealthService</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Management Group Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                    </And>
                  </Expression>
                </Or>
              </Expression>
              <Consolidator>
                <ConsolidationProperties />
                <TimeControl>
                  <!-- wait for delayed events -->
                  <Latency>10</Latency>
                  <!-- don't wait for backlogged items -->
                  <DrainWait>0</DrainWait>
                  <WithinTimeSchedule>
                    <!-- don't call script more than once 10 seconds -->
                    <Interval>10</Interval>
                  </WithinTimeSchedule>
                </TimeControl>
                <!-- output only after the latency has passed -->
                <!--     will output any input item (if any) that has happened -->
                <CountingCondition>
                  <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                </CountingCondition>
              </Consolidator>
            </DataSource>
            <ProbeAction ID="ScriptProbe" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.ScriptProbe">
              <!-- return any task; in case they've been discovered they'll be monitored as well -->
              <DiscoverWindowsTasks>$Config/WindowsTasks$</DiscoverWindowsTasks>
              <!-- look back maximum 15 minutes -->
              <LastRunDurationLookback>900</LastRunDurationLookback>
              <Debug>$Config/Debug$</Debug>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </ProbeAction>
            <!-- Task is: Ready AND has run in the past AND LastTaskResult is valid-->
            <!--       OR                                                       -->
            <!--     Unknown/Disabled                                           -->
            <!--     has never run                                              -->
            <!--     has no active triggers                                     -->
            <ConditionDetection ID="NoErrorCode" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <Or>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="Integer">3</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='LastRunTime']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="String">HasDate</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <RegExExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='LastTaskResult']</XPathQuery>
                              </ValueExpression>
                              <Operator>MatchesRegularExpression</Operator>
                              <Pattern>$Config/DesiredReturnCode$</Pattern>
                            </RegExExpression>
                          </Expression>
                        </And>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(0|1)$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='LastRunTime']</XPathQuery>
                          </ValueExpression>
                          <Operator>NotEqual</Operator>
                          <ValueExpression>
                            <Value Type="String">HasDate</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='TriggerText']</XPathQuery>
                          </ValueExpression>
                          <Operator>DoesNotContainSubstring</Operator>
                          <Pattern>True: </Pattern>
                        </RegExExpression>
                      </Expression>
                    </Or>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <!-- Task is: Ready AND has run in the past AND LastTaskResult is not valid-->
            <!--       AND                                                              -->
            <!--     has run                                                           -->
            <!--     has active triggers                                                -->
            <ConditionDetection ID="ErrorCode" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="Integer">3</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='LastRunTime']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">HasDate</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='LastTaskResult']</XPathQuery>
                      </ValueExpression>
                      <Operator>DoesNotMatchRegularExpression</Operator>
                      <Pattern>$Config/DesiredReturnCode$</Pattern>
                    </RegExExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='TriggerText']</XPathQuery>
                      </ValueExpression>
                      <Operator>ContainsSubstring</Operator>
                      <Pattern>True: </Pattern>
                    </RegExExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="NoFailure">
              <Node ID="NoErrorCode">
                <Node ID="ScriptProbe">
                  <Node ID="EventDS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Failure">
              <Node ID="ErrorCode">
                <Node ID="ScriptProbe">
                  <Node ID="EventDS" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Custom.TaskScheduler2.Task.LongRunningTask.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="UnderThresh" NoDetection="false" />
          <MonitorTypeState ID="OverThresh" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SpreadInitializationOverInterval" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TaskPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Threshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WindowsTasks" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="ThresholdMinutes" Selector="$Config/Threshold$" ParameterType="double" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="Scheduler" TypeID="System!System.UniquenessScheduler">
              <Scheduler>
                <SimpleReccuringSchedule>
                  <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                  <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
                </SimpleReccuringSchedule>
                <ExcludeDates />
              </Scheduler>
              <UniquenessKey>$Config/ComputerName$</UniquenessKey>
            </DataSource>
            <ProbeAction ID="ScriptProbe" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.ScriptProbe">
              <DiscoverWindowsTasks>$Config/WindowsTasks$</DiscoverWindowsTasks>
              <!-- look back maximum 15 minutes -->
              <LastRunDurationLookback>900</LastRunDurationLookback>
              <Debug>$Config/Debug$</Debug>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </ProbeAction>
            <ConditionDetection ID="UnderThreshold" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <Or>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <!-- how long the task took to complete on last run                    -->
                                <!--    if state is ready (3)                                           -->
                                <XPathQuery Type="Double">Property[@Name='LastRunDurationMinutes']</XPathQuery>
                              </ValueExpression>
                              <Operator>LessEqual</Operator>
                              <ValueExpression>
                                <Value Type="Double">$Config/Threshold$</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="Integer">3</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                        </And>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(0|1)$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='LastRunTime']</XPathQuery>
                          </ValueExpression>
                          <Operator>NotEqual</Operator>
                          <ValueExpression>
                            <Value Type="String">HasDate</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='TriggerText']</XPathQuery>
                          </ValueExpression>
                          <Operator>DoesNotContainSubstring</Operator>
                          <Pattern>True: </Pattern>
                        </RegExExpression>
                      </Expression>
                    </Or>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="OverThreshold" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='TriggerText']</XPathQuery>
                      </ValueExpression>
                      <Operator>ContainsSubstring</Operator>
                      <Pattern>True: </Pattern>
                    </RegExExpression>
                  </Expression>
                  <Expression>
                    <Or>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <!-- how long the task is already running (in minutes)                  -->
                                <!--     if it is currently running (State: 4)                           -->
                                <XPathQuery Type="Double">Property[@Name='CurrentRunDurationMinutes']</XPathQuery>
                              </ValueExpression>
                              <Operator>Greater</Operator>
                              <ValueExpression>
                                <Value Type="Double">$Config/Threshold$</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="Integer">4</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                        </And>
                      </Expression>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <!-- how long the task took to complete on last run                    -->
                                <!--    if state is ready (3)                                           -->
                                <XPathQuery Type="Double">Property[@Name='LastRunDurationMinutes']</XPathQuery>
                              </ValueExpression>
                              <Operator>Greater</Operator>
                              <ValueExpression>
                                <Value Type="Double">$Config/Threshold$</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="Integer">3</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                        </And>
                      </Expression>
                    </Or>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="UnderThresh">
              <Node ID="UnderThreshold">
                <Node ID="ScriptProbe">
                  <Node ID="Scheduler" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="OverThresh">
              <Node ID="OverThreshold">
                <Node ID="ScriptProbe">
                  <Node ID="Scheduler" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Custom.Windows.ScheduledTaskV2.DiscoveryData.NoTriggers.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="HasTrigger" NoDetection="false" />
          <MonitorTypeState ID="NoTrigger" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TaskPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WindowsTasks" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <!-- trigger on events: either agent start or after task configuration has changed                                         -->
            <!--     the latter are written by the rule Custom.TaskScheduler2.Task.TaskActionObserved.EventCreation.Rule -->
            <DataSource ID="EventDS" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent.DS">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <LogName>Operations Manager</LogName>
              <Expression>
                <Or>
                  <Expression>
                    <And>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(1004|1006)$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">PublisherName</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Health Service Script</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Script Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Custom.TaskScheduler2.Task.WorkflowTriggerEvent.ps1</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- MP Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[4]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">Custom.Windows.TaskScheduler.Windows2008.Monitoring</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Management Group Name -->
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[5]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="UnsignedInteger">2002</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">PublisherName</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">HealthService</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <!-- Management Group Name -->
                      <!--
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">$Target/ManagementGroup/Name$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      -->
                    </And>
                  </Expression>
                </Or>
              </Expression>
              <Consolidator>
                <ConsolidationProperties />
                <TimeControl>
                  <!-- wait for delayed events -->
                  <Latency>10</Latency>
                  <!-- don't wait for backlogged items -->
                  <DrainWait>0</DrainWait>
                  <WithinTimeSchedule>
                    <!-- don't call script more than once 10 seconds -->
                    <Interval>10</Interval>
                  </WithinTimeSchedule>
                </TimeControl>
                <!-- output only after the latency has passed -->
                <!--     will output any input item (if any) that has happened -->
                <CountingCondition>
                  <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                </CountingCondition>
              </Consolidator>
            </DataSource>
            <ProbeAction ID="ScriptProbe" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.ScriptProbe">
              <!-- return any task; in case they've been discovered they'll be monitored as well -->
              <DiscoverWindowsTasks>$Config/WindowsTasks$</DiscoverWindowsTasks>
              <!-- look back maximum 15 minutes -->
              <LastRunDurationLookback>900</LastRunDurationLookback>
              <Debug>$Config/Debug$</Debug>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </ProbeAction>
            <ConditionDetection ID="HasTriggerReturned" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <Or>
                      <Expression>
                        <And>
                          <Expression>
                            <RegExExpression>
                              <ValueExpression>
                                <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                              </ValueExpression>
                              <Operator>MatchesRegularExpression</Operator>
                              <Pattern>^(2|3|4)$</Pattern>
                            </RegExExpression>
                          </Expression>
                          <Expression>
                            <RegExExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='TriggerText']</XPathQuery>
                              </ValueExpression>
                              <Operator>ContainsSubstring</Operator>
                              <Pattern>True: </Pattern>
                            </RegExExpression>
                          </Expression>
                        </And>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^(0|1)$</Pattern>
                        </RegExExpression>
                      </Expression>
                    </Or>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="NoTriggerReturned" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Path']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/TaskPath$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                      </ValueExpression>
                      <Operator>MatchesRegularExpression</Operator>
                      <Pattern>^(2|3|4)$</Pattern>
                    </RegExExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='TriggerText']</XPathQuery>
                      </ValueExpression>
                      <Operator>DoesNotContainSubstring</Operator>
                      <Pattern>True: </Pattern>
                    </RegExExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="HasTrigger">
              <Node ID="HasTriggerReturned">
                <Node ID="ScriptProbe">
                  <Node ID="EventDS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="NoTrigger">
              <Node ID="NoTriggerReturned">
                <Node ID="ScriptProbe">
                  <Node ID="EventDS" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="Custom.TaskScheduler2.Task.DiscoverByScript" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Custom.TaskScheduler2.Task">
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="Windows!Microsoft.Windows.Computer" PropertyID="PrincipalName" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskName" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskPath" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskAuthor" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskDescription" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskIsHidden" />
            <!-- no longer discovery this property with LastResult -->
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskLastResult" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskLastRunTime" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskNextRunTime" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskStatus" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskTriggers" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskActions" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskUser" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="SchTaskLib!Microsoft.Windows.Computer.Hosts.Custom.Windows.TaskSchedulerTask" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource">
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <WindowsVersionRegEx>^6\.</WindowsVersionRegEx>
          <PathRegEx>.*</PathRegEx>
          <NameRegEx>.*</NameRegEx>
          <PathExcludeRegEx>^\\(CreateExplorerShellUnelevatedTask|Optimize Start Menu Cache Files-.+|Microsoft\\XblGameSave\\)</PathExcludeRegEx>
          <NameExcludeRegEx>^$</NameExcludeRegEx>
          <DiscoverWindowsTasks>false</DiscoverWindowsTasks>
          <DiscoverHiddenTasks>false</DiscoverHiddenTasks>
          <IntervalSeconds>14400</IntervalSeconds>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <Debug>false</Debug>
          <TimeoutSeconds>300</TimeoutSeconds>
          <ClassId>$MPElement[Name="Custom.TaskScheduler2.Task"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskName$</Name>
                <Value>$Data/Property[@Name='Name']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</Name>
                <Value>$Data/Property[@Name='Path']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskAuthor$</Name>
                <Value>$Data/Property[@Name='Author']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskDescription$</Name>
                <Value>$Data/Property[@Name='Description']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskIsHidden$</Name>
                <Value>$Data/Property[@Name='Hidden']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskLastResult$</Name>
                <!-- as monitors no longer depend on this disocvered property, set it to a static value -->
                <!--<Value>$Data/Property[@Name='LastTaskResult']$</Value>-->
                <Value> - </Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskLastRunTime$</Name>
                <Value>$Data/Property[@Name='LastRunTime']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskNextRunTime$</Name>
                <Value>$Data/Property[@Name='NextRunTime']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskStatus$</Name>
                <Value>$Data/Property[@Name='StateText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskTriggers$</Name>
                <Value>$Data/Property[@Name='TriggerText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskActions$</Name>
                <Value>$Data/Property[@Name='ActionText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskUser$</Name>
                <Value>$Data/Property[@Name='User']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</Name>
                <Value>$Data/Property[@Name='DiscoverWindowsTasksSetting']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>Task: $Data/Property[@Name='Name']$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <And>
              <Expression>
                <!-- only classic tasks -->
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='IsPSScheduledJob']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String">True</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <!-- only tasks without a repetitive schedule -->
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='TaskIsScheduled']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String">True</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </Expression>
        </DataSource>
      </Discovery>
      <Discovery ID="Custom.TaskScheduler2.ScheduledTask.DiscoverByScript" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Custom.TaskScheduler2.ScheduledTask">
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="Windows!Microsoft.Windows.Computer" PropertyID="PrincipalName" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskName" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskPath" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskAuthor" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskDescription" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskIsHidden" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskLastResult" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskLastRunTime" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskNextRunTime" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskStatus" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskTriggers" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskActions" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskUser" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="SchTaskLib!Microsoft.Windows.Computer.Hosts.Custom.Windows.TaskSchedulerTask" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource">
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <WindowsVersionRegEx>^6\.</WindowsVersionRegEx>
          <PathRegEx>.*</PathRegEx>
          <NameRegEx>.*</NameRegEx>
          <PathExcludeRegEx>^\\(CreateExplorerShellUnelevatedTask|Optimize Start Menu Cache Files-.+|Microsoft\\XblGameSave\\)</PathExcludeRegEx>
          <NameExcludeRegEx>^$</NameExcludeRegEx>
          <DiscoverWindowsTasks>false</DiscoverWindowsTasks>
          <DiscoverHiddenTasks>false</DiscoverHiddenTasks>
          <IntervalSeconds>14400</IntervalSeconds>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <Debug>false</Debug>
          <TimeoutSeconds>300</TimeoutSeconds>
          <ClassId>$MPElement[Name="Custom.TaskScheduler2.ScheduledTask"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskName$</Name>
                <Value>$Data/Property[@Name='Name']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</Name>
                <Value>$Data/Property[@Name='Path']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskAuthor$</Name>
                <Value>$Data/Property[@Name='Author']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskDescription$</Name>
                <Value>$Data/Property[@Name='Description']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskIsHidden$</Name>
                <Value>$Data/Property[@Name='Hidden']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskLastResult$</Name>
                <!-- as monitors no longer depend on this disocvered property, set it to a static value -->
                <!--<Value>$Data/Property[@Name='LastTaskResult']$</Value>-->
                <Value> - </Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskLastRunTime$</Name>
                <Value>$Data/Property[@Name='LastRunTime']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskNextRunTime$</Name>
                <Value>$Data/Property[@Name='NextRunTime']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskStatus$</Name>
                <Value>$Data/Property[@Name='StateText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskTriggers$</Name>
                <Value>$Data/Property[@Name='TriggerText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskActions$</Name>
                <Value>$Data/Property[@Name='ActionText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskUser$</Name>
                <Value>$Data/Property[@Name='User']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</Name>
                <Value>$Data/Property[@Name='DiscoverWindowsTasksSetting']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>Task: $Data/Property[@Name='Name']$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <And>
              <Expression>
                <!-- only classic tasks -->
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='IsPSScheduledJob']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String">True</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <!-- only tasks without a repetitive schedule -->
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='TaskIsScheduled']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">True</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </Expression>
        </DataSource>
      </Discovery>
      <Discovery ID="Custom.PSScheduledJob.Job.DiscoverByScript" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Custom.PSScheduledJob.Job">
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="Windows!Microsoft.Windows.Computer" PropertyID="PrincipalName" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskName" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskPath" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskAuthor" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskDescription" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskIsHidden" />
            <!-- no longer discovery this property with LastResult -->
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskLastResult" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskLastRunTime" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskNextRunTime" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskStatus" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskTriggers" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskActions" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskUser" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="SchTaskLib!Microsoft.Windows.Computer.Hosts.Custom.Windows.TaskSchedulerTask" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource">
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <WindowsVersionRegEx>^6\.</WindowsVersionRegEx>
          <PathRegEx>.*</PathRegEx>
          <NameRegEx>.*</NameRegEx>
          <PathExcludeRegEx>^$</PathExcludeRegEx>
          <NameExcludeRegEx>^$</NameExcludeRegEx>
          <DiscoverWindowsTasks>false</DiscoverWindowsTasks>
          <DiscoverHiddenTasks>false</DiscoverHiddenTasks>
          <IntervalSeconds>14400</IntervalSeconds>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <Debug>false</Debug>
          <TimeoutSeconds>300</TimeoutSeconds>
          <ClassId>$MPElement[Name="Custom.PSScheduledJob.Job"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskName$</Name>
                <Value>$Data/Property[@Name='Name']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</Name>
                <Value>$Data/Property[@Name='Path']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskAuthor$</Name>
                <Value>$Data/Property[@Name='Author']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskDescription$</Name>
                <Value>$Data/Property[@Name='Description']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskIsHidden$</Name>
                <Value>$Data/Property[@Name='Hidden']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskLastResult$</Name>
                <!-- as monitors no longer depend on this discovered property, set it to a static value -->
                <!--<Value>$Data/Property[@Name='LastTaskResult']$</Value>-->
                <Value> - </Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskLastRunTime$</Name>
                <Value>$Data/Property[@Name='LastRunTime']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskNextRunTime$</Name>
                <Value>$Data/Property[@Name='NextRunTime']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskStatus$</Name>
                <Value>$Data/Property[@Name='StateText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskTriggers$</Name>
                <Value>$Data/Property[@Name='TriggerText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskActions$</Name>
                <Value>$Data/Property[@Name='ActionText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskUser$</Name>
                <Value>$Data/Property[@Name='User']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</Name>
                <Value>$Data/Property[@Name='DiscoverWindowsTasksSetting']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>PS Job: $Data/Property[@Name='Name']$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <And>
              <Expression>
                <!-- only PSScheduledJob -->
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='IsPSScheduledJob']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">True</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <!-- only if job name was returned via PSScheduledJob module -->
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='PSJobName']</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>.+</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <!-- only tasks without a repetitive schedule -->
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='TaskIsScheduled']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String">True</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </Expression>
        </DataSource>
      </Discovery>
      <Discovery ID="Custom.PSScheduledJob.ScheduledJob.DiscoverByScript" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Custom.PSScheduledJob.ScheduledJob">
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="Windows!Microsoft.Windows.Computer" PropertyID="PrincipalName" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskName" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskPath" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskAuthor" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskDescription" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskIsHidden" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskLastResult" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskLastRunTime" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskNextRunTime" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskStatus" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskTriggers" />
            <Property TypeID="Custom.TaskScheduler2.Task" PropertyID="TaskActions" />
            <Property TypeID="SchTaskLib!Custom.Windows.TaskSchedulerTask" PropertyID="TaskUser" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="SchTaskLib!Microsoft.Windows.Computer.Hosts.Custom.Windows.TaskSchedulerTask" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource">
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <WindowsVersionRegEx>^6\.</WindowsVersionRegEx>
          <PathRegEx>.*</PathRegEx>
          <NameRegEx>.*</NameRegEx>
          <PathExcludeRegEx>^$</PathExcludeRegEx>
          <NameExcludeRegEx>^$</NameExcludeRegEx>
          <DiscoverWindowsTasks>false</DiscoverWindowsTasks>
          <DiscoverHiddenTasks>false</DiscoverHiddenTasks>
          <IntervalSeconds>14400</IntervalSeconds>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <Debug>false</Debug>
          <TimeoutSeconds>300</TimeoutSeconds>
          <ClassId>$MPElement[Name="Custom.PSScheduledJob.ScheduledJob"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskName$</Name>
                <Value>$Data/Property[@Name='Name']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</Name>
                <Value>$Data/Property[@Name='Path']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskAuthor$</Name>
                <Value>$Data/Property[@Name='Author']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskDescription$</Name>
                <Value>$Data/Property[@Name='Description']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskIsHidden$</Name>
                <Value>$Data/Property[@Name='Hidden']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskLastResult$</Name>
                <!-- as monitors no longer depend on this discovered property, set it to a static value -->
                <!--<Value>$Data/Property[@Name='LastTaskResult']$</Value>-->
                <Value> - </Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskLastRunTime$</Name>
                <Value>$Data/Property[@Name='LastRunTime']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskNextRunTime$</Name>
                <Value>$Data/Property[@Name='NextRunTime']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskStatus$</Name>
                <Value>$Data/Property[@Name='StateText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskTriggers$</Name>
                <Value>$Data/Property[@Name='TriggerText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskActions$</Name>
                <Value>$Data/Property[@Name='ActionText']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskUser$</Name>
                <Value>$Data/Property[@Name='User']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</Name>
                <Value>$Data/Property[@Name='DiscoverWindowsTasksSetting']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>PS Job: $Data/Property[@Name='Name']$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <And>
              <Expression>
                <!-- only PSScheduledJob -->
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='IsPSScheduledJob']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">True</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <!-- only if job name was returned via PSScheduledJob module -->
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='PSJobName']</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>.+</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <!-- only tasks without a repetitive schedule -->
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='TaskIsScheduled']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">True</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </Expression>
        </DataSource>
      </Discovery>
      <Discovery ID="Custom.TaskScheduler2.Task.ShowMessageAction.Group.Discovery" Enabled="true" Target="Custom.TaskScheduler2.Task.ShowMessageAction.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes />
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$Target/Id$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="Custom.TaskScheduler2.Task"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="SchTaskLib!Custom.Windows.TaskSchedulerTask.Group.Contains.Custom.Windows.TaskSchedulerTask"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <Property>$MPElement[Name="Custom.TaskScheduler2.Task"]/TaskActions$</Property>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>Display[ ]a[ ]message:</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="Custom.TaskScheduler2.Task.ComputerGroup.Discovery" Enabled="true" Target="Custom.TaskScheduler2.Task.ComputerGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes />
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$Target/Id$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="SC!Microsoft.SystemCenter.ComputerGroupContainsComputer"]$</RelationshipClass>
              <Expression>
                <Contains maxDepth="1">
                  <MonitoringClass>$MPElement[Name="Custom.TaskScheduler2.Task"]$</MonitoringClass>
                </Contains>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="Custom.TaskScheduler2.Task.TaskDuration.Collect" Enabled="false" Target="Custom.TaskScheduler2.Task" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Custom.Windows.ScheduledTask.TaskDuration.DataSource">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
            <TaskPath>$Target/Property[Type="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</TaskPath>
            <WindowsTasks>$Target/Property[Type="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</WindowsTasks>
            <Debug>false</Debug>
            <TimeoutSeconds>300</TimeoutSeconds>
            <!-- having an optimized filter should prevent from getting the same data point written twice on often runnig tasks -->
            <Tolerance>1</Tolerance>
            <ToleranceType>Percentage</ToleranceType>
            <!-- write a data point on every 5th sample even if tolerance condition isn't met -->
            <MaximumSampleSeparation>5</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="Custom.TaskScheduler2.Task.TaskActionObserved.EventCreation.Rule" Enabled="false" Target="SC!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Operations</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent_TaskEndingObserved.DS">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
            <ConsolidationSeconds>120</ConsolidationSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteEvent" TypeID="Custom.TaskScheduler2.Task.WorkflowTriggerEvent.WriteAction">
            <WaitTime>120</WaitTime>
            <ManagementPackName>Custom.Windows.TaskScheduler.Windows2008.Monitoring</ManagementPackName>
            <ManagementGroupName>$Target/ManagementGroup/Name$</ManagementGroupName>
            <EventId>1005</EventId>
            <EventType>TaskEnded</EventType>
            <EventCount>$Data/Count$</EventCount>
            <TimeWindowStart>$Data/TimeWindowStart$</TimeWindowStart>
            <TimeWindowEnd>$Data/TimeWindowEnd$</TimeWindowEnd>
            <TimeoutSeconds>300</TimeoutSeconds>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Custom.TaskScheduler2.Task.TaskConfigurationObserved.EventCreation.Rule" Enabled="false" Target="SC!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Operations</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Custom.TaskScheduler2.Task.RepeatedEvent_TaskConfigurationObserved.DS">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
            <ConsolidationSeconds>300</ConsolidationSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteEvent" TypeID="Custom.TaskScheduler2.Task.WorkflowTriggerEvent.WriteAction">
            <WaitTime>120</WaitTime>
            <ManagementPackName>Custom.Windows.TaskScheduler.Windows2008.Monitoring</ManagementPackName>
            <ManagementGroupName>$Target/ManagementGroup/Name$</ManagementGroupName>
            <EventId>1006</EventId>
            <EventType>TaskConfigurationChanged</EventType>
            <EventCount>$Data/Count$</EventCount>
            <TimeWindowStart>$Data/TimeWindowStart$</TimeWindowStart>
            <TimeWindowEnd>$Data/TimeWindowEnd$</TimeWindowEnd>
            <TimeoutSeconds>300</TimeoutSeconds>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Custom.TaskScheduler2.Task.TaskEvaluateSchedule.EventCreation.Rule" Enabled="false" Target="SC!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Operations</Category>
        <DataSources>
          <DataSource ID="Scheduler" TypeID="Custom.TaskScheduler2.Task.Scheduler.DS">
            <Interval>14400</Interval>
            <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteEvent" TypeID="Custom.TaskScheduler2.Task.WorkflowTriggerEvent.WriteAction">
            <WaitTime>0</WaitTime>
            <ManagementPackName>Custom.Windows.TaskScheduler.Windows2008.Monitoring</ManagementPackName>
            <ManagementGroupName>$Target/ManagementGroup/Name$</ManagementGroupName>
            <EventId>1004</EventId>
            <EventType>TaskEvaluateSchedule</EventType>
            <EventCount>1</EventCount>
            <TimeWindowStart>now</TimeWindowStart>
            <TimeWindowEnd>now</TimeWindowEnd>
            <TimeoutSeconds>300</TimeoutSeconds>
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Custom.TaskScheduler2.Task.EnableTaskHistory.Task" Accessibility="Internal" Enabled="true" Target="Windows!Microsoft.Windows.OperatingSystem" Timeout="300" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="Custom.TaskScheduler2.Task.EnableTaskHistory.WriteAction">
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor" Accessibility="Public" Enabled="true" Target="Custom.TaskScheduler2.Task" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="false" Priority="Normal" TypeID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.MonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Path']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='Name']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='User']$</AlertParameter3>
            <AlertParameter4>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter4>
            <AlertParameter5>$Data/Context/Property[@Name="PSJobErrorCount"]$</AlertParameter5>
            <AlertParameter6>$Data/Context/Property[@Name="PSJobErrorContent"]$</AlertParameter6>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="NoError" MonitorTypeStateID="NoError" HealthState="Success" />
          <OperationalState ID="Error" MonitorTypeStateID="Error" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <TaskPath>$Target/Property[Type="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</TaskPath>
          <!-- by default do not tolerate any errors -->
          <maxErrorCount>0</maxErrorCount>
          <WindowsTasks>$Target/Property[Type="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</WindowsTasks>
          <Debug>false</Debug>
          <TimeoutSeconds>300</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor" Accessibility="Internal" Enabled="true" Target="Windows!Microsoft.Windows.OperatingSystem" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="false" Priority="Normal" TypeID="Custom.Windows.TaskSchedulerV2.Registry2StateMonitorType" ConfirmDelivery="false">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor_AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="PS2_Compatible" MonitorTypeStateID="FirstCondition" HealthState="Success" />
          <OperationalState ID="NotPS2_Compatible" MonitorTypeStateID="SecondCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <WindowsVersionRegEx>^6\.</WindowsVersionRegEx>
          <RegistryAttributeDefinitions>
            <!-- PoSh 1.0 & 2.0 -->
            <RegistryAttributeDefinition>
              <AttributeName>PSCompatibleVersionV1</AttributeName>
              <Path>SOFTWARE\Microsoft\Powershell\1\PowerShellEngine\PSCompatibleVersion</Path>
              <PathType>1</PathType>
              <AttributeType>1</AttributeType>
              <RegistryView>Default</RegistryView>
            </RegistryAttributeDefinition>
            <!-- PoSh >= 3.0 -->
            <RegistryAttributeDefinition>
              <AttributeName>PSCompatibleVersionV3</AttributeName>
              <Path>SOFTWARE\Microsoft\Powershell\3\PowerShellEngine\PSCompatibleVersion</Path>
              <PathType>1</PathType>
              <AttributeType>1</AttributeType>
              <RegistryView>Default</RegistryView>
            </RegistryAttributeDefinition>
          </RegistryAttributeDefinitions>
          <Frequency>3600</Frequency>
          <FirstExpression>
            <Or>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/PSCompatibleVersionV1</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>2\.0</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/PSCompatibleVersionV3</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>.\..</Pattern>
                </RegExExpression>
              </Expression>
            </Or>
          </FirstExpression>
          <SecondExpression>
            <And>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/PSCompatibleVersionV1</XPathQuery>
                  </ValueExpression>
                  <Operator>DoesNotMatchRegularExpression</Operator>
                  <Pattern>2\.0</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/PSCompatibleVersionV3</XPathQuery>
                  </ValueExpression>
                  <Operator>DoesNotMatchRegularExpression</Operator>
                  <Pattern>.\..</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </SecondExpression>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Custom.TaskScheduler2.Task.LastResult.NextRun.Monitor" Accessibility="Public" Enabled="false" Target="Custom.TaskScheduler2.ScheduledTask" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="false" Priority="Normal" TypeID="Custom.Windows.ScheduledTaskV2.DiscoveryData.NextRun.MonitorType" ConfirmDelivery="false">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="Custom.TaskScheduler2.Task.LastResult.NextRun.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Path']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='Name']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Description']$</AlertParameter3>
            <AlertParameter4>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter4>
            <AlertParameter5>$Data/Context/Property[@Name="NextRunTime"]$</AlertParameter5>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="HasDate" MonitorTypeStateID="HasDate" HealthState="Success" />
          <OperationalState ID="Never" MonitorTypeStateID="Never" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <TaskPath>$Target/Property[Type="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</TaskPath>
          <WindowsTasks>$Target/Property[Type="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</WindowsTasks>
          <Debug>false</Debug>
          <TimeoutSeconds>300</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Custom.TaskSchedulerV2.EventLogEnabled.Monitor" Accessibility="Internal" Enabled="false" Target="Windows!Microsoft.Windows.OperatingSystem" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="false" Priority="Normal" TypeID="Custom.Windows.TaskSchedulerV2.Registry2StateMonitorType" ConfirmDelivery="false">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="Custom.TaskSchedulerV2.EventLogEnabled.Monitor_AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Log_Enabled" MonitorTypeStateID="FirstCondition" HealthState="Success" />
          <OperationalState ID="Log_Disabled" MonitorTypeStateID="SecondCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <WindowsVersionRegEx>^6\.</WindowsVersionRegEx>
          <RegistryAttributeDefinitions>
            <RegistryAttributeDefinition>
              <AttributeName>IsEnabled</AttributeName>
              <Path>SOFTWARE\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-TaskScheduler/Operational\Enabled</Path>
              <PathType>1</PathType>
              <AttributeType>2</AttributeType>
              <RegistryView>Default</RegistryView>
            </RegistryAttributeDefinition>
          </RegistryAttributeDefinitions>
          <Frequency>3600</Frequency>
          <FirstExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="Integer">Values/IsEnabled</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="Integer">1</Value>
              </ValueExpression>
            </SimpleExpression>
          </FirstExpression>
          <SecondExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="Integer">Values/IsEnabled</XPathQuery>
              </ValueExpression>
              <Operator>NotEqual</Operator>
              <ValueExpression>
                <Value Type="Integer">1</Value>
              </ValueExpression>
            </SimpleExpression>
          </SecondExpression>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Custom.TaskScheduler2.Task.ExecutionSkipped.Monitor" Accessibility="Public" Enabled="false" Target="Custom.TaskScheduler2.ScheduledTask" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="false" Priority="Normal" TypeID="Custom.TaskScheduler2.Task.ExecutionSkipped.MonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Custom.TaskScheduler2.Task.ExecutionSkipped.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Path']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='Name']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Description']$</AlertParameter3>
            <AlertParameter4>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter4>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="NormalRun" MonitorTypeStateID="NoExecutionSkipped" HealthState="Success" />
          <OperationalState ID="Skipped" MonitorTypeStateID="ExecutionSkipped" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <TaskPath>$Target/Property[Type="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</TaskPath>
          <WindowsTasks>$Target/Property[Type="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</WindowsTasks>
          <Debug>false</Debug>
          <TimeoutSeconds>300</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Custom.TaskScheduler2.Task.LastResult.Monitor" Accessibility="Public" Enabled="true" Target="Custom.TaskScheduler2.Task" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="false" Priority="Normal" TypeID="Custom.Windows.ScheduledTaskV2.DiscoveryData.LastResult.MonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Custom.TaskScheduler2.Task.LastResult.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Path']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='Name']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Description']$</AlertParameter3>
            <AlertParameter4>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter4>
            <AlertParameter5>$Data/Context/Property[@Name='LastTaskResultHex']$</AlertParameter5>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="NoFailure" MonitorTypeStateID="NoFailure" HealthState="Success" />
          <OperationalState ID="Failure" MonitorTypeStateID="Failure" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <TaskPath>$Target/Property[Type="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</TaskPath>
          <!-- by default these values are OK:     -->
          <!--  0                                  -->
          <!--  1        (exit code of popup boxes)-> use in override only -->
          <!--  267009   (currently running)       -->
          <!--  267014   (terminated by user       -->
          <!--  267045   (queued)                  -->
          <!--  267011   (The task has not yet run) -->
          <!-- -2147216609 (instance of this task already running) -> being taken care of by the separate monitor -->
          <DesiredReturnCode>^(0|267009|267011|267014|267045|-2147216609)$</DesiredReturnCode>
          <WindowsTasks>$Target/Property[Type="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</WindowsTasks>
          <Debug>false</Debug>
          <TimeoutSeconds>300</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Custom.TaskScheduler2.Task.LongRunningTask.Monitor" Accessibility="Public" Enabled="false" Target="Custom.TaskScheduler2.Task" ParentMonitorID="Health!System.Health.PerformanceState" Remotable="false" Priority="Normal" TypeID="Custom.TaskScheduler2.Task.LongRunningTask.MonitorType" ConfirmDelivery="false">
        <Category>PerformanceHealth</Category>
        <AlertSettings AlertMessage="Custom.TaskScheduler2.Task.LongRunningTask.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Path']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='Name']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Description']$</AlertParameter3>
            <AlertParameter4>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter4>
            <AlertParameter5>$Data/Context/Property[@Name="LastRunDurationMinutes"]$</AlertParameter5>
            <AlertParameter6>$Data/Context/Property[@Name="CurrentRunDurationMinutes"]$</AlertParameter6>
            <AlertParameter7>$Data/Context/Property[@Name="StateText"]$</AlertParameter7>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="UnderThreshold" MonitorTypeStateID="UnderThresh" HealthState="Success" />
          <OperationalState ID="OverThreshold" MonitorTypeStateID="OverThresh" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <!-- by default run every 15 minutes; set to lower values if detection needs to be faster.  -->
          <!--     note that even with thresholds set to lower as 15 minutes this monitor will work as -->
          <!--     it evaluates the total run time (for a finished task) as well as the current time  -->
          <!--     (for a running task).                                                              -->
          <IntervalSeconds>900</IntervalSeconds>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <TaskPath>$Target/Property[Type="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</TaskPath>
          <Threshold>60</Threshold>
          <WindowsTasks>$Target/Property[Type="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</WindowsTasks>
          <Debug>false</Debug>
          <TimeoutSeconds>300</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Custom.Windows.ScheduledTaskV2.DiscoveryData.NoTriggers.Monitor" Accessibility="Public" Enabled="false" Target="Custom.TaskScheduler2.Task" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="false" Priority="Normal" TypeID="Custom.Windows.ScheduledTaskV2.DiscoveryData.NoTriggers.MonitorType" ConfirmDelivery="false">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="Custom.Windows.ScheduledTaskV2.DiscoveryData.NoTriggers.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Path']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='Name']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Description']$</AlertParameter3>
            <AlertParameter4>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter4>
            <AlertParameter5>$Data/Context/Property[@Name='TriggerText']$</AlertParameter5>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="HasTrigger" MonitorTypeStateID="HasTrigger" HealthState="Success" />
          <OperationalState ID="NoTrigger" MonitorTypeStateID="NoTrigger" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <TaskPath>$Target/Property[Type="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$</TaskPath>
          <WindowsTasks>$Target/Property[Type="Custom.TaskScheduler2.Task"]/WinTasksDiscovered$</WindowsTasks>
          <Debug>false</Debug>
          <TimeoutSeconds>300</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
    </Monitors>
    <Recoveries>
      <Recovery ID="Custom.TaskScheduler2.Task.LastResult.Failure.Recovery" Accessibility="Public" Enabled="false" Target="Custom.TaskScheduler2.Task" Monitor="Custom.TaskScheduler2.Task.LastResult.Monitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="120">
        <Category>Custom</Category>
        <WriteAction ID="RunTask" TypeID="System!System.CommandExecuter">
          <ApplicationName>schtasks.exe</ApplicationName>
          <WorkingDirectory />
          <CommandLine>/run /tn "$Target/Property[Type="SchTaskLib!Custom.Windows.TaskSchedulerTask"]/TaskPath$"</CommandLine>
          <TimeoutSeconds>30</TimeoutSeconds>
          <RequireOutput>true</RequireOutput>
          <Files />
        </WriteAction>
      </Recovery>
      <Recovery ID="Custom.TaskScheduler2.Task.EnableTaskHistory.Recovery" Accessibility="Internal" Enabled="false" Target="Windows!Microsoft.Windows.OperatingSystem" Monitor="Custom.TaskSchedulerV2.EventLogEnabled.Monitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="120">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="Custom.TaskScheduler2.Task.EnableTaskHistory.WriteAction">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Recovery>
    </Recoveries>
    <Overrides>
      <RulePropertyOverride ID="Custom.TaskScheduler2.Task.TaskActionObserved.EventCreation.Rule.Override.for.Task2ComputerGroup" Context="Custom.TaskScheduler2.Task.ComputerGroup" Enforced="false" Rule="Custom.TaskScheduler2.Task.TaskActionObserved.EventCreation.Rule" Property="Enabled">
        <Value>true</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Custom.TaskScheduler2.Task.TaskConfigurationObserved.EventCreation.Rule.Override.for.Task2ComputerGroup" Context="Custom.TaskScheduler2.Task.ComputerGroup" Enforced="false" Rule="Custom.TaskScheduler2.Task.TaskConfigurationObserved.EventCreation.Rule" Property="Enabled">
        <Value>true</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Custom.TaskScheduler2.Task.TaskEvaluateSchedule.EventCreation.Rule.Override.for.Task2ComputerGroup" Context="Custom.TaskScheduler2.Task.ComputerGroup" Enforced="false" Rule="Custom.TaskScheduler2.Task.TaskEvaluateSchedule.EventCreation.Rule" Property="Enabled">
        <Value>true</Value>
      </RulePropertyOverride>
      <MonitorConfigurationOverride ID="OverrideFor.Custom.TaskScheduler2.Task.LastResult.Monitor.ForContext.Custom.TaskScheduler2.Task.ShowMessageAction.Group" Context="Custom.TaskScheduler2.Task.ShowMessageAction.Group" Enforced="false" Monitor="Custom.TaskScheduler2.Task.LastResult.Monitor" Parameter="DesiredReturnCode">
        <!-- by default these values are OK:     -->
        <!--  0                                  -->
        <!--  1        (exit code of popup boxes)-> use in override only -->
        <!--  267009   (currently running)       -->
        <!--  267014   (terminated by user       -->
        <!--  267045   (queued)                  -->
        <!-- -2147216609 (instance of this task already running) -> being taken care of by the separate monitor -->
        <Value>^(0|1|267009|267014|267045|-2147216609)$</Value>
      </MonitorConfigurationOverride>
      <MonitorPropertyOverride ID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor.Disable.Override_for_Custom.TaskScheduler2.Task" Context="Custom.TaskScheduler2.Task" Enforced="false" Monitor="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor.Enable.Override_for_Custom.PSScheduledJob.Job" Context="Custom.PSScheduledJob.Job" Enforced="false" Monitor="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor.Enable.Override_for_Custom.PSScheduledJob.ScheduledJob" Context="Custom.PSScheduledJob.ScheduledJob" Enforced="false" Monitor="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor.Override.for.Client.Computer" Context="Windows!Microsoft.Windows.Client.Computer" Enforced="false" Monitor="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.TaskSchedulerV2.EventLogEnabled.Monitor.Override.for.Task2ComputerGroup" Context="Custom.TaskScheduler2.Task.ComputerGroup" Enforced="false" Monitor="Custom.TaskSchedulerV2.EventLogEnabled.Monitor" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor_DisableGroup_Override" Context="SchTaskLib!Custom.Windows.TaskSchedulerTask.MonitoringDisabledGroup" Enforced="false" Monitor="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.TaskScheduler2.Task.ExecutionSkipped.Monitor_DisableGroup_Override" Context="SchTaskLib!Custom.Windows.TaskSchedulerTask.MonitoringDisabledGroup" Enforced="false" Monitor="Custom.TaskScheduler2.Task.ExecutionSkipped.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.TaskScheduler2.Task.LastResult.Monitor_DisableGroup_Override" Context="SchTaskLib!Custom.Windows.TaskSchedulerTask.MonitoringDisabledGroup" Enforced="false" Monitor="Custom.TaskScheduler2.Task.LastResult.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.TaskScheduler2.Task.LongRunningTask.Monitor_DisableGroup_Override" Context="SchTaskLib!Custom.Windows.TaskSchedulerTask.MonitoringDisabledGroup" Enforced="false" Monitor="Custom.TaskScheduler2.Task.LongRunningTask.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.Windows.ScheduledTaskV2.DiscoveryData.NoTriggers.Monitor_DisableGroup_Override" Context="SchTaskLib!Custom.Windows.TaskSchedulerTask.MonitoringDisabledGroup" Enforced="false" Monitor="Custom.Windows.ScheduledTaskV2.DiscoveryData.NoTriggers.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.TaskScheduler2.Task.LastResult.NextRun.Monitor_DisableGroup_Override" Context="SchTaskLib!Custom.Windows.TaskSchedulerTask.MonitoringDisabledGroup" Enforced="false" Monitor="Custom.TaskScheduler2.Task.LastResult.NextRun.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.TaskSchedulerV2.EventLogEnabled.Monitor_DisableGroup_Override" Context="SchTaskLib!Custom.Windows.TaskSchedulerTask.MonitoringDisabledGroup" Enforced="false" Monitor="Custom.TaskSchedulerV2.EventLogEnabled.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor_DisableClusterVirtualServer_Override" Context="ClusterLib!Microsoft.Windows.Cluster.VirtualServer" Enforced="false" Monitor="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <DiscoveryPropertyOverride ID="Custom.TaskScheduler2.Task.DiscoverByScript.Override.for.Clients" Context="Windows!Microsoft.Windows.Client.Computer" Enforced="false" Discovery="Custom.TaskScheduler2.Task.DiscoverByScript" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Custom.TaskScheduler2.ScheduledTask.DiscoverByScript.Override.for.Clients" Context="Windows!Microsoft.Windows.Client.Computer" Enforced="false" Discovery="Custom.TaskScheduler2.ScheduledTask.DiscoverByScript" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Custom.PSScheduledJob.Job.DiscoverByScript.Override.for.Clients" Context="Windows!Microsoft.Windows.Client.Computer" Enforced="false" Discovery="Custom.PSScheduledJob.Job.DiscoverByScript" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Custom.PSScheduledJob.ScheduledJob.DiscoverByScript.Override.for.Clients" Context="Windows!Microsoft.Windows.Client.Computer" Enforced="false" Discovery="Custom.PSScheduledJob.ScheduledJob.DiscoverByScript" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
    </Overrides>
  </Monitoring>
  <Presentation>
    <Views>
      <View ID="Custom.TaskSchedulerV2.MPAlertView" Accessibility="Internal" Enabled="true" Target="Windows!Microsoft.Windows.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <SourceList>
            <Source>
              <Type>Monitor</Type>
              <Id>$MPElement[Name="Custom.TaskSchedulerV2.EventLogEnabled.Monitor"]$</Id>
            </Source>
            <Source>
              <Type>Monitor</Type>
              <Id>$MPElement[Name="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor"]$</Id>
            </Source>
          </SourceList>
          <ResolutionState>
            <StateRange Operator="NotEquals">255</StateRange>
          </ResolutionState>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Severity</Name>
            <Id>Severity</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="54" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending">
            <Name>Icon</Name>
            <Id>Icon</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>MonitoringObjectPath</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Source</Name>
            <Id>MonitoringObjectDisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>MonitoringObjectInMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Resolution State</Name>
            <Id>ResolutionState</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="150" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Created</Name>
            <Id>TimeRaised</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Age</Name>
            <Id>Age</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Type</Name>
            <Id>Category</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Owner</Name>
            <Id>Owner</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Priority</Name>
            <Id>Priority</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Latency</Name>
            <Id>Latency</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Description</Name>
            <Id>Description</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Connector</Name>
            <Id>ConnectorId</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Forwarding Status</Name>
            <Id>ConnectorStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Class</Name>
            <Id>Class</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time in State</Name>
            <Id>TimeInState</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 1</Name>
            <Id>CustomField1</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 2</Name>
            <Id>CustomField2</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 3</Name>
            <Id>CustomField3</Id>
          </ColumnInfo>
          <ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 4</Name>
            <Id>CustomField4</Id>
          </ColumnInfo>
          <ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 5</Name>
            <Id>CustomField5</Id>
          </ColumnInfo>
          <ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 6</Name>
            <Id>CustomField6</Id>
          </ColumnInfo>
          <ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 7</Name>
            <Id>CustomField7</Id>
          </ColumnInfo>
          <ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 8</Name>
            <Id>CustomField8</Id>
          </ColumnInfo>
          <ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 9</Name>
            <Id>CustomField9</Id>
          </ColumnInfo>
          <ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 10</Name>
            <Id>CustomField10</Id>
          </ColumnInfo>
          <ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Resolved By</Name>
            <Id>ResolvedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time Resolved</Name>
            <Id>TimeResolved</Id>
          </ColumnInfo>
          <ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last State Change</Name>
            <Id>TimeResolutionStateLastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Last Modified</Name>
            <Id>LastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Last Modified By</Name>
            <Id>LastModifiedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Management Group</Name>
            <Id>ManagementGroup</Id>
          </ColumnInfo>
          <ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Site</Name>
            <Id>SiteName</Id>
          </ColumnInfo>
          <ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Repeat Count</Name>
            <Id>RepeatCount</Id>
          </ColumnInfo>
          <ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Ticket ID</Name>
            <Id>TicketId</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
    </Views>
    <FolderItems>
      <FolderItem ElementID="Custom.TaskSchedulerV2.MPAlertView" Folder="SchTaskLib!Custom.Windows.ScheduledTask.Folder" ID="Id_0" />
    </FolderItems>
    <StringResources>
      <StringResource ID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor.AlertMessage" />
      <StringResource ID="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor_AlertMessage" />
      <StringResource ID="Custom.TaskScheduler2.Task.LastResult.NextRun.Monitor.AlertMessage" />
      <StringResource ID="Custom.TaskSchedulerV2.EventLogEnabled.Monitor_AlertMessage" />
      <StringResource ID="Custom.TaskScheduler2.Task.ExecutionSkipped.Monitor.AlertMessage" />
      <StringResource ID="Custom.TaskScheduler2.Task.LastResult.Monitor.AlertMessage" />
      <StringResource ID="Custom.TaskScheduler2.Task.LongRunningTask.Monitor.AlertMessage" />
      <StringResource ID="Custom.Windows.ScheduledTaskV2.DiscoveryData.NoTriggers.Monitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Custom.PSScheduledJob.Job">
          <Name>PowerShell Job</Name>
          <Description>PSScheduledJob (introduced with PowerShell 3.0)</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.PSScheduledJob.ScheduledJob">
          <Name>Powershell Job (time scheduled)</Name>
          <Description>PSScheduledJob (introduced with PowerShell 3.0) - with a repetitive schedule</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task">
          <Name>Scheduler 2.0 Task</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.ScheduledTask">
          <Name>Scheduler 2.0 Task (time scheduled)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task" SubElementID="TaskAuthor">
          <Name>Author</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task" SubElementID="TaskIsHidden">
          <Name>Hidden</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task" SubElementID="TaskTriggers">
          <Name>Triggers (Enabled: Type)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task" SubElementID="TaskActions">
          <Name>Actions (Type: Details)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task" SubElementID="WinTasksDiscovered">
          <Name>WinD (internal)</Name>
          <Description>Flag to mark if Windows OS tasks were discovered on this computer. It will be used to configure monitor and rule workflows.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.ShowMessageAction.Group">
          <Name>Scheduled tasks with ShowMessage action group</Name>
          <Description>Since the normal return code of a ShowMessage action is '1', this group is the target for an override for the tasks' return code.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.ComputerGroup">
          <Name>Scheduler 2.0 Task Computer Group</Name>
          <Description>Contains computers on which Task Scheduler 2.x tasks were discovered (Windows 2008 - 2012 R2)</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource">
          <Name>Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource</Name>
          <Description>Script Discovery DS</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource" SubElementID="PathRegEx">
          <Name>Task Path Include Filter (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource" SubElementID="NameRegEx">
          <Name>Task Name Include Filter (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource" SubElementID="PathExcludeRegEx">
          <Name>Task Path Exclude Filter (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.GetTaskProperties.Discovery.DataSource" SubElementID="NameExcludeRegEx">
          <Name>Task Name Exclude Filter (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.DiscoverByScript">
          <Name>Windows Task Scheduler 2.x General Trigger Task Discovery (Windows Server 2008 through 2012 R2)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.ScheduledTask.DiscoverByScript">
          <Name>Windows Task Scheduler 2.x Schedule Triggered Task Discovery (Windows Server 2008 through 2012 R2)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.PSScheduledJob.Job.DiscoverByScript">
          <Name>PowerShell Job General Trigger Job Discovery (Windows Server 2008 through 2012 R2)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.PSScheduledJob.ScheduledJob.DiscoverByScript">
          <Name>PowerShell Job Schedule Triggered Job Discovery (Windows Server 2008 through 2012 R2)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.ShowMessageAction.Group.Discovery">
          <Name>Populate 'Scheduled tasks with ShowMessage action group'</Name>
          <Description>GroupCalc</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.ComputerGroup.Discovery">
          <Name>Populate 'Scheduler 2.0 Task Computer Group'</Name>
          <Description>GroupCalc</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.TaskScheduler.Monitoring">
          <Name>Windows Task Scheduler and PS Job Monitoring - Windows Server 2008 / 2008 R2 / 2012 / 2012 R2 / 2016</Name>
          <Description>Discovers and monitors the health of Windows 2008 - 2016 server based scheduled tasks and PowerShell scheduled jobs.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor">
          <Name>Last Result Successful Monitor - PSJob Error Count</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor.AlertMessage">
          <Name>PS Scheduled Job failed to complete successfully</Name>
          <Description>Last execution of PowerShell Scheduled Job '{1}' returned {4} errors. It did not run successfully.

Task Scheduler Computer: {3}
Task Path: {0}
Job Name: {1}
Job User: {2}

Error Count: {4}
Error Summary: {5}</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor">
          <Name>Scheduled Task Monitoring compatibility</Name>
          <Description>The "Windows Task Scheduler and PS Job Monitoring" management pack uses PowerShell to discover and monitor scheduled tasks.
If Powershell is not installed, the management pack will fail to discover tasks and jobs.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor_AlertMessage">
          <Name>Task Scheduler Monitoring is not possible</Name>
          <Description>PowerShell is not installed on computer {0} or the installed version is not compatible with PowerShell 2.0.

In order to monitor scheduled tasks, install the appropriate PowerShell environment (&gt;= Version 2.0).</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.LastResult.NextRun.Monitor">
          <Name>Next Run Defined Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.LastResult.NextRun.Monitor.AlertMessage">
          <Name>Scheduled Task's schedule expired</Name>
          <Description>The Scheduled Task '{1}' has a next run property of: {4}. The task will not run again until its schedule is updated.

 Task Scheduler Computer: {3}
 Task Path: {0}
 Task Description: {2}</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskSchedulerV2.EventLogEnabled.Monitor">
          <Name>Scheduled Tasks History Enabled</Name>
          <Description>All Tasks History must be enabled or the Scheduled Task MP will not be able to monitor the scheduled tasks.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskSchedulerV2.EventLogEnabled.Monitor_AlertMessage">
          <Name>Task Scheduler: All Tasks History is disabled</Name>
          <Description>All Tasks History on computer '{0}' is disabled.
The Scheduled Task Management Pack will not be able to monitor the tasks on this computer.

"Enable All Tasks History" on the Task Scheduler's action pane.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.ExecutionSkipped.Monitor">
          <Name>Next scheduled execution skipped</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.ExecutionSkipped.Monitor.AlertMessage">
          <Name>Scheduled Task ran past next scheduled execution</Name>
          <Description>The Scheduled Task {1}'s execution was skipped because and instance of the task was already running.

Task Scheduler Computer: {3}
Task Path: {0}
Task Description: {2}</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.LastResult.Monitor">
          <Name>Last Result Successful Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.LastResult.Monitor.AlertMessage">
          <Name>Scheduled Task failed to complete successfully</Name>
          <Description>Last result code of Scheduled Task "{1}" was: {4}. It did not run successfully.
 
 Task Scheduler Computer: {3}
 Task Path: {0}
 Task Description: {2}</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.LongRunningTask.Monitor">
          <Name>Long running task</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.LongRunningTask.Monitor.AlertMessage">
          <Name>Scheduled Task is/was running too long </Name>
          <Description>The Scheduled Task {1} is running too long respectively took too long to complete.
          
 Task Scheduler Computer: {3}
 Task Path: {0}
 Task Description: {2}
 
 Task State (when alert was triggered): {6}
 Task Last Run Duration: {4}
 Task Current Run Duration (when alert was triggered): {5}</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.Windows.ScheduledTaskV2.DiscoveryData.NoTriggers.Monitor">
          <Name>Triggers Defined Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.Windows.ScheduledTaskV2.DiscoveryData.NoTriggers.Monitor.AlertMessage">
          <Name>Scheduled Task has no active triggers</Name>
          <Description>The Scheduled Task "{1}" does not have any active triggers. The task will not run until its triggers are updated.
          
Task Scheduler Computer: {3}
Task Path: {0}
Task Description: {2}</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.MonitorType" SubElementID="maxErrorCount">
          <Name>max. Error Count</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.Windows.ScheduledTaskV2.DiscoveryData.LastResult.MonitorType" SubElementID="DesiredReturnCode">
          <Name>Expected Return Code (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.LongRunningTask.MonitorType" SubElementID="ThresholdMinutes">
          <Name>Threshold (minutes)</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.LastResult.Failure.Recovery">
          <Name>Run Scheduled Task</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.EnableTaskHistory.Recovery">
          <Name>Enable "All Tasks History"</Name>
          <Description>Enables Task Scheduler event log on Windows 2008 and later.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.TaskDuration.Collect">
          <Name>Collect scheduled task job duration</Name>
          <Description>Writes the following performance counters: Windows Scheduled Tasks / Job Duration (min)</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.TaskActionObserved.EventCreation.Rule">
          <Name>Task Scheduler Action Observer Rule</Name>
          <Description>Consolidated rule that writes an event to the 'Operations Manager' event log after task scheduler actions have been observed in the Microsoft-Windows-TaskScheduler event log.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.TaskConfigurationObserved.EventCreation.Rule">
          <Name>Task Scheduler Configuration Change Observer Rule</Name>
          <Description>Consolidated rule that writes an event to the 'Operations Manager' event log after task scheduler configuration has changed. Looks for events in the Microsoft-Windows-TaskScheduler event log.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.TaskEvaluateSchedule.EventCreation.Rule">
          <Name>Task Scheduler Evaluation Trigger Rule</Name>
          <Description>Consolidated rule that writes an event to the 'Operations Manager' event log every 4 hours. That event is used to trigger monitors and rules.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskScheduler2.Task.EnableTaskHistory.Task">
          <Name>Enable All Tasks History</Name>
          <Description>Enables Task Scheduler event log on Windows Server 2008 and later.</Description>
        </DisplayString>
        <DisplayString ElementID="Custom.TaskSchedulerV2.MPAlertView">
          <Name>Management Pack Alerts</Name>
          <Description>Alerts about the internal operations of the management pack. They are not related to the scheduled tasks themselfes.</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>
        <KnowledgeArticle ElementID="Custom.Windows.ScheduledTaskV2.PSScheduledJob.LastResult_Error.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>PowerShell Scheduled Job Last Result Monitor.</maml:para>
              <maml:para>The monitor checks the last result of a PowerShell Scheduled Job for error items (exceptions).</maml:para>
              <maml:para>Any error observed is considered a warning condition for scheduled job with trigger(s).</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to:</maml:para>
              <maml:list>
                <maml:listItem>
                  <maml:para>Disable the monitor</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Allow a number of exceptions to be considered a healthy condition.</maml:para>
                </maml:listItem>
              </maml:list>
              <maml:para />
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>The PowerShell script called by the Scheduled Job threw exceptions.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Log onto the affected computer as the user that created the PowerShell Scheduled Job and run the following PowerShell command to get access to the job's last result:</maml:para>
              <maml:list>
                <maml:listItem>
                  <maml:para>Get-Job -Name "name of the job" -Newest 1</maml:para>
                  <maml:para>gets the latest result object of a scheduled job, including the script code that ran.</maml:para>
                </maml:listItem>
              </maml:list>
              <maml:para>This allows further investigating why the script did not complete sucessfully. Refer to the "Additional" section in case changes to the job are required.</maml:para>
              <maml:para>
                and/or <maml:navigationLink><maml:linkText>Re-run Scheduled Job</maml:linkText><maml:uri condition="Task" href="SchTaskLib!Custom.Windows.ScheduledTask.RunTask&amp;tasktarget={$TARGET$}" uri="MOM.Console.Exe" /></maml:navigationLink></maml:para>
              <maml:para>Disable or delete the PowerShell Scheduled Job</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional</maml:title>
              <maml:para>TechNet documentation regarding PSScheduledJob:</maml:para>
              <maml:para>
                -
                <maml:navigationLink><maml:linkText>Windows PowerShell Scheduled Job Cmdlets</maml:linkText><maml:uri href="http://technet.microsoft.com/en-us/library/hh849778%28v=wps.620%29.aspx" /></maml:navigationLink></maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Custom.TaskSchedulerV2.PowerShellCompatible.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>PowerShell Version &gt;= 2.0 is required for scheduled task and PowerShell scheduled job monitoring.</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>
                Download and install PowerShell 2.0 or later on this agent computer from <maml:navigationLink><maml:linkText>www.microsoft.com</maml:linkText><maml:uri href="http://www.microsoft.com" /></maml:navigationLink></maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Custom.TaskScheduler2.Task.LastResult.NextRun.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Windows Scheduled Task Next Run Defined Monitor.</maml:para>
              <maml:para>The monitor checks the next run time of a scheduled taks every minute.</maml:para>
              <maml:para>'Never' is considered a warning condition for an enabled scheduled task.</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to:</maml:para>
              <maml:para> - Disable the monitor</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>The task's schedule has expired</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Reconfigure the Scheduled Task</maml:para>
              <maml:para>Disable or delete the Scheduled Task</maml:para>
              <maml:para />
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Custom.TaskSchedulerV2.EventLogEnabled.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Windows Scheduled Tasks History Enabled Monitor.</maml:para>
              <maml:para>The monitor checks if logging to the 'Microsoft-Windows-TaskScheduler/Operational' event log is enabled.</maml:para>
              <maml:para>Without logging enabled 'Windows Task Scheduler Monitoring MP' will not be able to properly monitor the scheduled tasks on this computer.</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Open 'Task Scheduler' (taskschd.msc /s) and:</maml:para>
              <maml:para> - 'Enable All Tasks History' from the action pane</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>Logging to 'Microsoft-Windows-TaskScheduler/Operational' is not enabled</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Enable logging</maml:para>
              <maml:para />
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Custom.TaskScheduler2.Task.ExecutionSkipped.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Next scheduled execution skipped Monitor.</maml:para>
              <maml:para>The monitor checks if a scheduled task's execution was skipped because it was still running at the time it should have been started.</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to:</maml:para>
              <maml:para> - Disable the monitor</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>The scheduled task is taking longer to complete than expected.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Reconfigure the scheduled task's schedule to accomodate for its execution duration.</maml:para>
              <maml:para>Consider altering the task so that it terminates faster.</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional</maml:title>
              <maml:para>Monitor is based on Warning event 322 (Launch request ignored, instance already running) in the TaskScheduler log. It will return to green if:</maml:para>
              <maml:para>-  The task is executed normally (no 322 event during a run)</maml:para>
              <maml:para> - The task is disabled  </maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Custom.TaskScheduler2.Task.LastResult.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Windows Scheduled Task Last Result Monitor.</maml:para>
              <maml:para>The monitor checks the last result code (exit code) of a scheduled task.</maml:para>
              <maml:para>Anything other than the following values is considered a warning condition for an enabled scheduled task.</maml:para>
              <maml:para> - '0'</maml:para>
              <maml:para> - '1' (for tasks containing a popup action)</maml:para>
              <maml:para> - '267009': currently running</maml:para>
              <maml:para> - '267014': was terminated by user</maml:para>
              <maml:para> - '267045': queued</maml:para>
              <maml:para> - '-2147216609': instance of this task already running -&gt; being taken care of by the separate monitor</maml:para>
              <maml:para> - '-2147750687': task already running -&gt; being taken care of by the separate monitor</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to:</maml:para>
              <maml:list>
                <maml:listItem>
                  <maml:para>Disable the monitor</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Alter the expected return code 'Expected Return Code (RegEx)'. Use a valid regular expression. E.g. ^(0|9|123)$</maml:para>
                </maml:listItem>
              </maml:list>
              <maml:para />
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>The process called by the scheduled task failed</maml:para>
              <maml:para>Authentication problems of the scheduled task’s user account</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Consult the event log of the affected machine and/or <maml:navigationLink><maml:linkText>Run Scheduled Task</maml:linkText><maml:uri condition="Task" href="SchTaskLib!Custom.Windows.ScheduledTask.RunTask&amp;tasktarget={$TARGET$}" uri="MOM.Console.Exe" /></maml:navigationLink></maml:para>
              <maml:para>Disable or delete the Scheduled Task</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional</maml:title>
              <maml:para>msdn reference about task scheduler 2.0 constants:</maml:para>
              <maml:para>-
                <maml:navigationLink><maml:linkText>Task Scheduler Error and Success Constants</maml:linkText><maml:uri href="http://msdn.microsoft.com/en-us/library/aa383604(VS.85).aspx" /></maml:navigationLink></maml:para>
              <maml:para>Note that the Operations Manager management pack displays the error codes as decimal values while the reference states hexadecimal. </maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Custom.TaskScheduler2.Task.LongRunningTask.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Long running task monitor.</maml:para>
              <maml:para>The monitor checks if a scheduled task is taking too long to complete. This monitor is disabled by default.</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to:</maml:para>
              <maml:list>
                <maml:listItem>
                  <maml:para>Enable the monitor</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Set the threshold (in minutes)</maml:para>
                </maml:listItem>
              </maml:list>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>The task is taking longer to complete than expected.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Consider optimizing the task so that it terminates faster</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional</maml:title>
              <maml:para>This monitor will detect long running tasks reliably as long as they are not started more often than every 15 minutes.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Custom.Windows.ScheduledTaskV2.DiscoveryData.NoTriggers.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks if a task has at least one trigger enabled. Tasks without any active triggers will never run unless started manually.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Disable the monitor if not required. Do so using overrides.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>The task does not have any triggers or all are disabled.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>If you need the task running:</maml:para>
              <maml:para> - Add or enable triggers</maml:para>
              <maml:para>If you do not need the task running:</maml:para>
              <maml:para> - Disable or delete the task</maml:para>
              <maml:para />
              <maml:para />
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>